/*
 * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     ADuCM350.h
 * @brief    CMSIS HeaderFile
 * @version  0.1
 * @date     20. September 2018
 * @note     Generated by SVDConv V3.2.66 on Thursday, 20.09.2018 14:29:59
 *           from File 'ADuCM350.svd',
 *           last modified on Thursday, 20.09.2018 04:59:52
 */



/** @addtogroup Analog Devices
  * @{
  */


/** @addtogroup ADuCM350
  * @{
  */


#ifndef ADUCM350_H
#define ADUCM350_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M3 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  ADuCM350 Specific Interrupt Numbers  ========================================== */
  WUT_IRQn                  =   0,              /*!< 0  Wake Up Timer interrupt                                                */
  EINT0_IRQn                =   1,              /*!< 1  External Interrupt 0                                                   */
  EINT1_IRQn                =   2,              /*!< 2  External Interrupt 1                                                   */
  EINT2_IRQn                =   3,              /*!< 3  External Interrupt 2                                                   */
  EINT3_IRQn                =   4,              /*!< 4  External Interrupt 3                                                   */
  EINT4_IRQn                =   5,              /*!< 5  External Interrupt 4                                                   */
  EINT5_IRQn                =   6,              /*!< 6  External Interrupt 5                                                   */
  EINT6_IRQn                =   7,              /*!< 7  External Interrupt 6                                                   */
  EINT7_IRQn                =   8,              /*!< 8  External Interrupt 7                                                   */
  EINT8_IRQn                =   9,              /*!< 9  External Interrupt 8                                                   */
  WDT_IRQn                  =  10,              /*!< 10 WDT Interrupt                                                          */
  TIMER0_IRQn               =  11,              /*!< 11 Timer interrupt                                                        */
  TIMER1_IRQn               =  12,              /*!< 12 Timer 1 Interrupt                                                      */
  FLASH0_IRQn               =  13,              /*!< 13 Flash Controller Interrupt                                             */
  UART_IRQn                 =  14,              /*!< 14 interrupt                                                              */
  SPI0_IRQn                 =  15,              /*!< 15 SPI 0 interrupt                                                        */
  SPIH_IRQn                 =  16,              /*!< 16 interrupt                                                              */
  I2CS_IRQn                 =  17,              /*!< 17 I2C 0 slave interrupt                                                  */
  I2CM_IRQn                 =  18,              /*!< 18 I2C 0 master interrupt                                                 */
  DMA_ERR_IRQn              =  19,              /*!< 19 DMA interrupt                                                          */
  DMA_SPIH_TX_IRQn          =  20,              /*!< 20 DMA Ch 0 interrupt                                                     */
  DMA_SPIH_RX_IRQn          =  21,              /*!< 21 DMA Ch 1 interrupt                                                     */
  DMA_SPI0_TX_IRQn          =  22,              /*!< 22 DMA Ch 2 interrupt                                                     */
  DMA_SPI0_RX_IRQn          =  23,              /*!< 23 DMA Ch 3 interrupt                                                     */
  DMA_SPI1_TX_IRQn          =  24,              /*!< 24 DMA Ch 4 interrupt                                                     */
  DMA_SPI1_RX_IRQn          =  25,              /*!< 25 DMA Ch 5 interrupt                                                     */
  DMA_UART_TX_IRQn          =  26,              /*!< 26 DMA Ch 6 interrupt                                                     */
  DMA_UART_RX_IRQn          =  27,              /*!< 27 DMA Ch 7 interrupt                                                     */
  DMA_I2CS_TX_IRQn          =  28,              /*!< 28 DMA Ch 8 interrupt                                                     */
  DMA_I2CS_RX_IRQn          =  29,              /*!< 29 DMA Ch 9 interrupt                                                     */
  DMA_I2CM_IRQn             =  30,              /*!< 30 DMA Ch 10 interrupt                                                    */
  DMA_AFE_TX_IRQn           =  31,              /*!< 31 DMA Ch 11 interrupt                                                    */
  DMA_AFE_RX_IRQn           =  32,              /*!< 32 DMA Ch 12 interrupt                                                    */
  DMA_CRC_IRQn              =  33,              /*!< 33 DMA Ch 13 interrupt                                                    */
  DMA_PDI_IRQn              =  34,              /*!< 34 DMA Ch 14 interrupt                                                    */
  DMA_I2S_IRQn              =  35,              /*!< 35 DMA Ch 15 interrupt                                                    */
  USB_WAKEUP_IRQn           =  36,              /*!< 36 USB Wakeup interrupt                                                   */
  USB_CNTL_IRQn             =  37,              /*!< 37 USB Controller interrupt                                               */
  USB_DMA_IRQn              =  38,              /*!< 38 USB DMA interrupt                                                      */
  I2S_IRQn                  =  39,              /*!< 39 I2S interrupt                                                          */
  TIMER2_IRQn               =  40,              /*!< 40 TIMER 2 interrupt                                                      */
  SPI1_IRQn                 =  42,              /*!< 42 interrupt                                                              */
  RTC_IRQn                  =  43,              /*!< 43 Real Time Clock interrupt                                              */
  BEEP_IRQn                 =  45,              /*!< 45 Beep interrupt                                                         */
  LCD_IRQn                  =  46,              /*!< 46 LCD Controller interrupt                                               */
  GPIOA_IRQn                =  47,              /*!< 47 interrupt                                                              */
  GPIOB_IRQn                =  48,              /*!< 48 interrupt                                                              */
  AFE_CAPTURE_IRQn          =  50,              /*!< 50 Analog Front End Capture interrupt                                     */
  AFE_GENERATE_IRQn         =  51,              /*!< 51 Analog Front End Generation interrupt                                  */
  AFE_CMD_FIFO_IRQn         =  52,              /*!< 52 Analog Front End FIFO CMD interrupt                                    */
  AFE_DATA_FIFO_IRQn        =  53,              /*!< 53 Analog Front End FIFO DATA interrupt                                   */
  GP_FLASH_IRQn             =  55,              /*!< 55 Flash EEPROM interrupt                                                 */
  RAND_IRQn                 =  58,              /*!< 58 Random Bit Generator interrupt                                         */
  PDI_IRQn                  =  59               /*!< 59 Paraller Display Interface interrupt                                   */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M3 Processor and Core Peripherals  =========================== */
#define __CM3_REV                 0x0201U       /*!< CM3 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  0        /*!< MPU present or not                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm3.h"                           /*!< ARM Cortex-M3 processor and core peripherals                              */
#include "system_ADuCM350.h"                    /*!< ADuCM350 System                                                           */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         ADI_GPT0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief General Purpose Timer 0 (ADI_GPT0)
  */

typedef struct {                                /*!< (@ 0x40000000) ADI_GPT0 Structure                                         */
  __IOM uint16_t  LOAD;                         /*!< (@ 0x00000000) 16-bit load value                                          */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  CURCNT;                       /*!< (@ 0x00000004) 16-bit timer value. read only.                             */
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t CTL;                         /*!< (@ 0x00000008) Control Register                                           */
    
    struct {
      __IOM uint16_t PRE        : 2;            /*!< [1..0] Prescaler                                                          */
      __IOM uint16_t UP         : 1;            /*!< [2..2] Count-up                                                           */
      __IOM uint16_t MOD        : 1;            /*!< [3..3] Mode                                                               */
      __IOM uint16_t ENABLE     : 1;            /*!< [4..4] Enable                                                             */
      __IOM uint16_t CLK        : 2;            /*!< [6..5] Clock Select                                                       */
      __IOM uint16_t RLD        : 1;            /*!< [7..7] Timer reload on write to clear register                            */
      __IOM uint16_t EVENT      : 4;            /*!< [11..8] Event Select, selects 1 of the available events.                  */
      __IOM uint16_t EVENTEN    : 1;            /*!< [12..12] Enable/Disable event time capture                                */
    } CTL_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t CLRINT;                      /*!< (@ 0x0000000C) Clear interrupt register                                   */
    
    struct {
      __IOM uint16_t TMOUT      : 1;            /*!< [0..0] timeout interrupt                                                  */
      __IOM uint16_t CAP        : 1;            /*!< [1..1] Captured event interrupt                                           */
    } CLRINT_b;
  } ;
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  CAPTURE;                      /*!< (@ 0x00000010) Capture Register                                           */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  ALOAD;                        /*!< (@ 0x00000014) 16-bit load value, asynchronous                            */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  ACURCNT;                      /*!< (@ 0x00000018) 16-bit timer value, asynchronous                           */
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t STATUS;                      /*!< (@ 0x0000001C) Status                                                     */
    
    struct {
      __IOM uint16_t TMOUT      : 1;            /*!< [0..0] Time out event occurred                                            */
      __IOM uint16_t CAP        : 1;            /*!< [1..1] Capture event pending                                              */
      __IM  uint16_t            : 4;
      __IOM uint16_t BUSY       : 1;            /*!< [6..6] Timer Busy                                                         */
      __IOM uint16_t PDOK       : 1;            /*!< [7..7] GPTI Sync                                                          */
    } STATUS_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t PWMCTL;                      /*!< (@ 0x00000020) PWM Control Register                                       */
    
    struct {
      __IOM uint16_t MATCH_EN   : 1;            /*!< [0..0] High or Toggle                                                     */
      __IOM uint16_t IDLE_STATE : 1;            /*!< [1..1] Idle Hi/Lo                                                         */
    } PWMCTL_b;
  } ;
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  PWMMATCH;                     /*!< (@ 0x00000024) PWM Match Value                                            */
} ADI_GPT0_Type;                                /*!< Size = 38 (0x26)                                                          */



/* =========================================================================================================================== */
/* ================                                         ADI_GPT1                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief General Purpose Timer1 (ADI_GPT1)
  */

typedef struct {                                /*!< (@ 0x40000400) ADI_GPT1 Structure                                         */
  __IOM uint16_t  LOAD;                         /*!< (@ 0x00000000) 16-bit load value                                          */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  CURCNT;                       /*!< (@ 0x00000004) 16-bit timer value. read only.                             */
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t CTL;                         /*!< (@ 0x00000008) Control Register                                           */
    
    struct {
      __IOM uint16_t PRE        : 2;            /*!< [1..0] Prescaler                                                          */
      __IOM uint16_t UP         : 1;            /*!< [2..2] Count-up                                                           */
      __IOM uint16_t MOD        : 1;            /*!< [3..3] Mode                                                               */
      __IOM uint16_t ENABLE     : 1;            /*!< [4..4] Enable                                                             */
      __IOM uint16_t CLK        : 2;            /*!< [6..5] Clock Select                                                       */
      __IOM uint16_t RLD        : 1;            /*!< [7..7] Timer reload on write to clear register                            */
      __IOM uint16_t EVENT      : 4;            /*!< [11..8] Event Select, selects 1 of the available events.                  */
      __IOM uint16_t EVENTEN    : 1;            /*!< [12..12] Enable/Disable event time capture                                */
    } CTL_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t CLRINT;                      /*!< (@ 0x0000000C) Clear interrupt register                                   */
    
    struct {
      __IOM uint16_t TMOUT      : 1;            /*!< [0..0] timeout interrupt                                                  */
      __IOM uint16_t CAP        : 1;            /*!< [1..1] Captured event interrupt                                           */
    } CLRINT_b;
  } ;
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  CAPTURE;                      /*!< (@ 0x00000010) Capture Register                                           */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  ALOAD;                        /*!< (@ 0x00000014) 16-bit load value, asynchronous                            */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  ACURCNT;                      /*!< (@ 0x00000018) 16-bit timer value, asynchronous                           */
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t STATUS;                      /*!< (@ 0x0000001C) Status                                                     */
    
    struct {
      __IOM uint16_t TMOUT      : 1;            /*!< [0..0] Time out event occurred                                            */
      __IOM uint16_t CAP        : 1;            /*!< [1..1] Capture event pending                                              */
      __IM  uint16_t            : 4;
      __IOM uint16_t BUSY       : 1;            /*!< [6..6] Timer Busy                                                         */
      __IOM uint16_t PDOK       : 1;            /*!< [7..7] GPTI Sync                                                          */
    } STATUS_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t PWMCTL;                      /*!< (@ 0x00000020) PWM Control Register                                       */
    
    struct {
      __IOM uint16_t MATCH_EN   : 1;            /*!< [0..0] High or Toggle                                                     */
      __IOM uint16_t IDLE_STATE : 1;            /*!< [1..1] Idle Hi/Lo                                                         */
    } PWMCTL_b;
  } ;
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  PWMMATCH;                     /*!< (@ 0x00000024) PWM Match Value                                            */
} ADI_GPT1_Type;                                /*!< Size = 38 (0x26)                                                          */



/* =========================================================================================================================== */
/* ================                                         ADI_GPT2                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief General Purpose Timer2 (ADI_GPT2)
  */

typedef struct {                                /*!< (@ 0x40000800) ADI_GPT2 Structure                                         */
  __IOM uint16_t  LOAD;                         /*!< (@ 0x00000000) 16-bit load value                                          */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  CURCNT;                       /*!< (@ 0x00000004) 16-bit timer value. read only.                             */
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t CTL;                         /*!< (@ 0x00000008) Control Register                                           */
    
    struct {
      __IOM uint16_t PRE        : 2;            /*!< [1..0] Prescaler                                                          */
      __IOM uint16_t UP         : 1;            /*!< [2..2] Count-up                                                           */
      __IOM uint16_t MOD        : 1;            /*!< [3..3] Mode                                                               */
      __IOM uint16_t ENABLE     : 1;            /*!< [4..4] Enable                                                             */
      __IOM uint16_t CLK        : 2;            /*!< [6..5] Clock Select                                                       */
      __IOM uint16_t RLD        : 1;            /*!< [7..7] Timer reload on write to clear register                            */
      __IOM uint16_t EVENT      : 4;            /*!< [11..8] Event Select, selects 1 of the available events.                  */
      __IOM uint16_t EVENTEN    : 1;            /*!< [12..12] Enable/Disable event time capture                                */
    } CTL_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t CLRINT;                      /*!< (@ 0x0000000C) Clear interrupt register                                   */
    
    struct {
      __IOM uint16_t TMOUT      : 1;            /*!< [0..0] timeout interrupt                                                  */
      __IOM uint16_t CAP        : 1;            /*!< [1..1] Captured event interrupt                                           */
    } CLRINT_b;
  } ;
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  CAPTURE;                      /*!< (@ 0x00000010) Capture Register                                           */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  ALOAD;                        /*!< (@ 0x00000014) 16-bit load value, asynchronous                            */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  ACURCNT;                      /*!< (@ 0x00000018) 16-bit timer value, asynchronous                           */
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t STATUS;                      /*!< (@ 0x0000001C) Status                                                     */
    
    struct {
      __IOM uint16_t TMOUT      : 1;            /*!< [0..0] Time out event occurred                                            */
      __IOM uint16_t CAP        : 1;            /*!< [1..1] Capture event pending                                              */
      __IM  uint16_t            : 4;
      __IOM uint16_t BUSY       : 1;            /*!< [6..6] Timer Busy                                                         */
      __IOM uint16_t PDOK       : 1;            /*!< [7..7] GPTI Sync                                                          */
    } STATUS_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t PWMCTL;                      /*!< (@ 0x00000020) PWM Control Register                                       */
    
    struct {
      __IOM uint16_t MATCH_EN   : 1;            /*!< [0..0] High or Toggle                                                     */
      __IOM uint16_t IDLE_STATE : 1;            /*!< [1..1] Idle Hi/Lo                                                         */
    } PWMCTL_b;
  } ;
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  PWMMATCH;                     /*!< (@ 0x00000024) PWM Match Value                                            */
} ADI_GPT2_Type;                                /*!< Size = 38 (0x26)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADI_ID                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief ID (ADI_ID)
  */

typedef struct {                                /*!< (@ 0x40002020) ADI_ID Structure                                           */
  __IOM uint16_t  ADIID;                        /*!< (@ 0x00000000) Analog Devices ID Register                                 */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  CHIPID;                       /*!< (@ 0x00000004) Chip ID Register                                           */
} ADI_ID_Type;                                  /*!< Size = 6 (0x6)                                                            */



/* =========================================================================================================================== */
/* ================                                          ADI_PWR                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Power Management Unit (ADI_PWR)
  */

typedef struct {                                /*!< (@ 0x40002400) ADI_PWR Structure                                          */
  
  union {
    __IOM uint16_t PWRMOD;                      /*!< (@ 0x00000000) PWR Power modes                                            */
    
    struct {
      __IOM uint16_t PWRMOD     : 2;            /*!< [1..0] Power modes control bits                                           */
      __IM  uint16_t            : 1;
      __IOM uint16_t WICENACK   : 1;            /*!< [3..3] For Deepsleep mode only                                            */
      __IM  uint16_t            : 11;
      __IOM uint16_t RAM0_RET   : 1;            /*!< [15..15] Retention for RAM 0                                              */
    } PWRMOD_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t PWRKEY;                      /*!< (@ 0x00000004) PWR Key protection for PWRMOD                              */
    
    struct {
      __IOM uint16_t KEY        : 16;           /*!< [15..0] Lock for PWRMOD                                                   */
    } PWRKEY_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t PSMCON;                      /*!< (@ 0x00000008) PWR PSM Configuration                                      */
    
    struct {
      __IOM uint16_t DVDDPSMIRQ : 1;            /*!< [0..0] disable DVDD PSM to generate NMI interrupt                         */
      __IM  uint16_t            : 1;
      __IOM uint16_t DVDDPSMFLG : 1;            /*!< [2..2] DVDD PSM sticky flag.                                              */
      __IOM uint16_t DVDDPSMSTAT : 1;           /*!< [3..3] DVDD PSM current status                                            */
      __IOM uint16_t VCCMPSMIRQ : 1;            /*!< [4..4] VCCM PSM generate NMI interrupt                                    */
      __IM  uint16_t            : 1;
      __IOM uint16_t VCCMPSMFLG : 1;            /*!< [6..6] VCCM PSM sticky flag                                               */
      __IOM uint16_t VCCMPSMSTAT : 1;           /*!< [7..7] VCCM PSM current status                                            */
    } PSMCON_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t OSCKEY;                      /*!< (@ 0x0000000C) PWR Key protection for OSCCTRL                             */
    
    struct {
      __IOM uint16_t VALUE      : 16;           /*!< [15..0] Key value                                                         */
    } OSCKEY_b;
  } ;
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  OSCCTRL;                      /*!< (@ 0x00000010) PWR Oscillator control                                     */
} ADI_PWR_Type;                                 /*!< Size = 18 (0x12)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADI_EI                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief External Interrupts (ADI_EI)
  */

typedef struct {                                /*!< (@ 0x40002420) ADI_EI Structure                                           */
  
  union {
    __IOM uint16_t EI0CFG;                      /*!< (@ 0x00000000) PWR External Interrupt configuration 0                     */
    
    struct {
      __IOM uint16_t IRQ0MDE    : 1;            /*!< [0..0] External Interrupt 0 Mode registers                                */
      __IM  uint16_t            : 2;
      __IOM uint16_t IRQOEN     : 1;            /*!< [3..3] External Interrupt 0 Enable bit                                    */
      __IOM uint16_t IRQ1MDE    : 1;            /*!< [4..4] External Interrupt 1 Mode registers                                */
      __IM  uint16_t            : 2;
      __IOM uint16_t IRQ1EN     : 1;            /*!< [7..7] External Interrupt 1 Enable bit                                    */
      __IOM uint16_t IRQ2MDE    : 1;            /*!< [8..8] External Interrupt 2 Mode registers                                */
      __IM  uint16_t            : 2;
      __IOM uint16_t IRQ2EN     : 1;            /*!< [11..11] External Interrupt 2 Enable bit                                  */
      __IOM uint16_t IRQ3MDE    : 3;            /*!< [14..12] External Interrupt 3 Mode registers                              */
      __IOM uint16_t IRQ3EN     : 1;            /*!< [15..15] External Interrupt 3 enable bit                                  */
    } EI0CFG_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t EI1CFG;                      /*!< (@ 0x00000004) PWR External Interrupt configuration 1                     */
    
    struct {
      __IOM uint16_t IRQ4MDE    : 1;            /*!< [0..0] External Interrupt 4 Mode registers                                */
      __IM  uint16_t            : 2;
      __IOM uint16_t IRQ4EN     : 1;            /*!< [3..3] External Interrupt 4 Enable bit                                    */
      __IOM uint16_t IRQ5MDE    : 1;            /*!< [4..4] External Interrupt 5 Mode registers                                */
      __IM  uint16_t            : 2;
      __IOM uint16_t IRQ5EN     : 1;            /*!< [7..7] External Interrupt 5 Enable bit                                    */
      __IOM uint16_t IRQ6MDE    : 1;            /*!< [8..8] External Interrupt 6 Mode registers                                */
      __IM  uint16_t            : 2;
      __IOM uint16_t IRQ6EN     : 1;            /*!< [11..11] External Interrupt 6 Enable bit                                  */
      __IOM uint16_t IRQ7MDE    : 1;            /*!< [12..12] External Interrupt 7 Mode registers                              */
      __IM  uint16_t            : 2;
      __IOM uint16_t IRQ7EN     : 1;            /*!< [15..15] External Interrupt 7 enable bit                                  */
    } EI1CFG_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t EI2CFG;                      /*!< (@ 0x00000008) PWR External Interrupt configuration 2                     */
    
    struct {
      __IOM uint16_t IRQ8MDE    : 1;            /*!< [0..0] External Interrupt 8 Mode registers                                */
      __IM  uint16_t            : 2;
      __IOM uint16_t IRQ8EN     : 1;            /*!< [3..3] External Interrupt 8 Enable bit                                    */
      __IOM uint16_t USBDPMDE   : 1;            /*!< [4..4] USB DP Detection Mode registers                                    */
      __IM  uint16_t            : 2;
      __IOM uint16_t USBDPEN    : 1;            /*!< [7..7] USB DP Detection Enable bit                                        */
      __IOM uint16_t USBDMMDE   : 1;            /*!< [8..8] USB DM Detection Mode registers                                    */
      __IM  uint16_t            : 2;
      __IOM uint16_t USBDMEN    : 1;            /*!< [11..11] USB DM Detection Enable bit                                      */
      __IOM uint16_t USBVBUSMDE : 1;            /*!< [12..12] USB VBUS Detection Mode registers                                */
      __IM  uint16_t            : 2;
      __IOM uint16_t USBVBUSEN  : 1;            /*!< [15..15] USB VBUS Detection Enable bit                                    */
    } EI2CFG_b;
  } ;
  __IM  uint16_t  RESERVED2[3];
  
  union {
    __IOM uint16_t EICLR;                       /*!< (@ 0x00000010) PWR External Interrupt clear                               */
    
    struct {
      __IOM uint16_t IRQ0       : 1;            /*!< [0..0] External interrupt 0                                               */
      __IOM uint16_t IRQ1       : 1;            /*!< [1..1] External interrupt 1                                               */
      __IOM uint16_t IRQ2       : 1;            /*!< [2..2] External interrupt 2                                               */
      __IOM uint16_t IRQ3       : 1;            /*!< [3..3] External interrupt 3                                               */
      __IOM uint16_t IRQ4       : 1;            /*!< [4..4] External interrupt 4                                               */
      __IOM uint16_t IRQ5       : 1;            /*!< [5..5] External interrupt 5                                               */
      __IOM uint16_t IRQ6       : 1;            /*!< [6..6] External interrupt 6                                               */
      __IOM uint16_t IRQ7       : 1;            /*!< [7..7] External interrupt 7                                               */
      __IOM uint16_t IRQ8       : 1;            /*!< [8..8] External interrupt 8                                               */
      __IOM uint16_t USBDP      : 1;            /*!< [9..9] USB DP detection                                                   */
      __IOM uint16_t USBDM      : 1;            /*!< [10..10] USB DM detection                                                 */
      __IOM uint16_t USBVBUS    : 1;            /*!< [11..11] USB VBUS detection                                               */
    } EICLR_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t NMICLR;                      /*!< (@ 0x00000014) PWR Non-maskable interrupt clear                           */
    
    struct {
      __IOM uint16_t CLEAR      : 1;            /*!< [0..0] NMI clear                                                          */
    } NMICLR_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IOM uint16_t USBWKSTAT;                   /*!< (@ 0x00000018) PWR USB Wakeup Status                                      */
    
    struct {
      __IOM uint16_t USBDP      : 1;            /*!< [0..0] USB DP event status                                                */
      __IOM uint16_t USBDM      : 1;            /*!< [1..1] USB DM event status                                                */
      __IOM uint16_t USBVBUS    : 1;            /*!< [2..2] USB VBUS event status                                              */
    } USBWKSTAT_b;
  } ;
  __IM  uint16_t  RESERVED5[3];
  
  union {
    __IOM uint16_t RSTSTA;                      /*!< (@ 0x00000020) PWR Reset status                                           */
    
    struct {
      __IOM uint16_t POR        : 1;            /*!< [0..0] Power-on reset                                                     */
      __IOM uint16_t EXTRST     : 1;            /*!< [1..1] External reset                                                     */
      __IOM uint16_t WDRST      : 1;            /*!< [2..2] Watchdog timeout                                                   */
      __IOM uint16_t SWRST      : 1;            /*!< [3..3] Software reset                                                     */
    } RSTSTA_b;
  } ;
} ADI_EI_Type;                                  /*!< Size = 34 (0x22)                                                          */



/* =========================================================================================================================== */
/* ================                                        ADI_PWRVCC                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Power (ADI_PWRVCC)
  */

typedef struct {                                /*!< (@ 0x40002480) ADI_PWRVCC Structure                                       */
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint16_t VCCMCON;                     /*!< (@ 0x00000008) PWR VCCM Control and Status                                */
    
    struct {
      __IOM uint16_t LOADENABLE : 1;            /*!< [0..0] Enabling 820 ohm load                                              */
      __IOM uint16_t VCCMPSMEN  : 1;            /*!< [1..1] VCCM power supply monitoring enable                                */
      __IM  uint16_t            : 2;
      __IOM uint16_t VCCMTHR    : 4;            /*!< [7..4] VCCM Threshold adjust                                              */
      __IOM uint16_t VCCMTHR_HYST : 2;          /*!< [9..8] VCCM Threshold hysteresis                                          */
    } VCCMCON_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t VBACKCON;                    /*!< (@ 0x0000000C) PWR VBACK control and status                               */
    
    struct {
      __IOM uint16_t VBACKRESTORE : 1;          /*!< [0..0] VBACK Restore level                                                */
      __IM  uint16_t            : 3;
      __IOM uint16_t VLOTRIP    : 1;            /*!< [4..4] Vlo trip level                                                     */
      __IM  uint16_t            : 1;
      __IOM uint16_t VLTRIP     : 1;            /*!< [6..6] Vlo trip hysteresis                                                */
      __IM  uint16_t            : 1;
      __IOM uint16_t VBACKTRIP  : 1;            /*!< [8..8] Vback trip point adjust                                            */
    } VBACKCON_b;
  } ;
} ADI_PWRVCC_Type;                              /*!< Size = 14 (0xe)                                                           */



/* =========================================================================================================================== */
/* ================                                          ADI_WUT                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Wake-up timer (ADI_WUT)
  */

typedef struct {                                /*!< (@ 0x40002500) ADI_WUT Structure                                          */
  __IOM uint16_t  T2VAL0;                       /*!< (@ 0x00000000) WUT Current count value - LS halfword.                     */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  T2VAL1;                       /*!< (@ 0x00000004) WUT Current count value - MS halfword                      */
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t T2CON;                       /*!< (@ 0x00000008) WUT Control                                                */
    
    struct {
      __IOM uint16_t PRE        : 1;            /*!< [0..0] Prescaler                                                          */
      __IM  uint16_t            : 2;
      __IOM uint16_t FREEZE     : 1;            /*!< [3..3] Freeze enable                                                      */
      __IM  uint16_t            : 2;
      __IOM uint16_t MOD        : 1;            /*!< [6..6] Timer mode                                                         */
      __IOM uint16_t ENABLE     : 1;            /*!< [7..7] Timer enable                                                       */
      __IOM uint16_t WUEN       : 1;            /*!< [8..8] Wakeup enable                                                      */
      __IOM uint16_t CLK        : 1;            /*!< [9..9] Clock select                                                       */
      __IM  uint16_t            : 1;
      __IOM uint16_t STOP       : 1;            /*!< [11..11] Disables updating field A register T2WUFA                        */
    } T2CON_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t T2INC;                       /*!< (@ 0x0000000C) WUT 12-bit interval for wakeup field A                     */
    
    struct {
      __IOM uint16_t INTERVAL   : 1;            /*!< [0..0] Interval for wakeup field A                                        */
    } T2INC_b;
  } ;
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  T2WUFB0;                      /*!< (@ 0x00000010) WUT Wakeup field B - LS halfword                           */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  T2WUFB1;                      /*!< (@ 0x00000014) WUT Wakeup field B - MS halfword                           */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  T2WUFC0;                      /*!< (@ 0x00000018) WUT Wakeup field C - LS halfword                           */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  T2WUFC1;                      /*!< (@ 0x0000001C) WUT Wakeup field C - MS halfword                           */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  T2WUFD0;                      /*!< (@ 0x00000020) WUT Wakeup field D - LS halfword                           */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  T2WUFD1;                      /*!< (@ 0x00000024) WUT Wakeup field D - MS halfword                           */
  __IM  uint16_t  RESERVED9;
  
  union {
    __IOM uint16_t T2IEN;                       /*!< (@ 0x00000028) WUT Interrupt enable                                       */
    
    struct {
      __IOM uint16_t WUFA       : 1;            /*!< [0..0] T2WUFA interrupt enable                                            */
      __IOM uint16_t WUFB       : 1;            /*!< [1..1] T2WUFB interrupt enable                                            */
      __IOM uint16_t WUFC       : 1;            /*!< [2..2] T2WUFC interrupt enable                                            */
      __IOM uint16_t WUFD       : 1;            /*!< [3..3] T2WUFD interrupt enable                                            */
      __IOM uint16_t ROLL       : 1;            /*!< [4..4] Rollover interrupt enable                                          */
    } T2IEN_b;
  } ;
  __IM  uint16_t  RESERVED10;
  
  union {
    __IOM uint16_t T2STA;                       /*!< (@ 0x0000002C) WUT Status                                                 */
    
    struct {
      __IOM uint16_t WUFA       : 1;            /*!< [0..0] T2WUFA interrupt flag                                              */
      __IOM uint16_t WUFB       : 1;            /*!< [1..1] T2WUFB interrupt flag                                              */
      __IOM uint16_t WUFC       : 1;            /*!< [2..2] T2WUFC interrupt flag                                              */
      __IOM uint16_t WUFD       : 1;            /*!< [3..3] T2WUFD interrupt flag                                              */
      __IOM uint16_t ROLL       : 1;            /*!< [4..4] Rollover interrupt flag                                            */
      __IM  uint16_t            : 1;
      __IOM uint16_t IRQCRY     : 1;            /*!< [6..6] Wakeup status to powerdown                                         */
      __IOM uint16_t FREEZE     : 1;            /*!< [7..7] Timer value freeze                                                 */
      __IOM uint16_t PDOK       : 1;            /*!< [8..8] Enable bit synchronized                                            */
    } T2STA_b;
  } ;
  __IM  uint16_t  RESERVED11;
  
  union {
    __IOM uint16_t T2CLRI;                      /*!< (@ 0x00000030) WUT Clear interrupt register                               */
    
    struct {
      __IOM uint16_t WUFA       : 1;            /*!< [0..0] T2WUFA interrupt clear                                             */
      __IOM uint16_t WUFB       : 1;            /*!< [1..1] T2WUFB interrupt clear                                             */
      __IOM uint16_t WUFC       : 1;            /*!< [2..2] T2WUFC interrupt clear                                             */
      __IOM uint16_t WUFD       : 1;            /*!< [3..3] T2WUFD interrupt clear                                             */
      __IOM uint16_t ROLL       : 1;            /*!< [4..4] Rollover interrupt clear                                           */
    } T2CLRI_b;
  } ;
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  WUTVAL_LOW;                   /*!< (@ 0x00000034) WUT Unsynchronized lower 16 bits of WU Timer
                                                                    counter value.                                             */
  __IM  uint16_t  RESERVED13;
  __IOM uint16_t  WUTVAL_HIGH;                  /*!< (@ 0x00000038) WUT Unsynchronized upper 16 bits of WU Timer
                                                                    counter value.                                             */
  __IM  uint16_t  RESERVED14;
  __IOM uint16_t  T2WUFA0;                      /*!< (@ 0x0000003C) WUT Wakeup field A - LS halfword                           */
  __IM  uint16_t  RESERVED15;
  __IOM uint16_t  T2WUFA1;                      /*!< (@ 0x00000040) WUT Wakeup field A - MS halfword                           */
} ADI_WUT_Type;                                 /*!< Size = 66 (0x42)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADI_WDT                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief WatchDog Timer (ADI_WDT)
  */

typedef struct {                                /*!< (@ 0x40002580) ADI_WDT Structure                                          */
  __IOM uint16_t  T3LD;                         /*!< (@ 0x00000000) WDT Load value                                             */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  T3VAL;                        /*!< (@ 0x00000004) WDT Current count value                                    */
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t T3CON;                       /*!< (@ 0x00000008) WDT Control                                                */
    
    struct {
      __IOM uint16_t PMD        : 1;            /*!< [0..0] Power Mode Disable                                                 */
      __IOM uint16_t IRQ        : 1;            /*!< [1..1] Timer interrupt                                                    */
      __IOM uint16_t PRE        : 1;            /*!< [2..2] Prescaler                                                          */
      __IM  uint16_t            : 2;
      __IOM uint16_t ENABLE     : 1;            /*!< [5..5] Timer enable                                                       */
      __IOM uint16_t MOD        : 1;            /*!< [6..6] Timer mode                                                         */
    } T3CON_b;
  } ;
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  T3CLRI;                       /*!< (@ 0x0000000C) WDT Clear interrupt register                               */
  __IM  uint16_t  RESERVED3[5];
  
  union {
    __IOM uint16_t T3STA;                       /*!< (@ 0x00000018) WDT Status                                                 */
    
    struct {
      __IOM uint16_t IRQ        : 1;            /*!< [0..0] WDT Interrupt                                                      */
      __IOM uint16_t CLRI       : 1;            /*!< [1..1] T3CLRI write sync in progress                                      */
      __IOM uint16_t LD         : 1;            /*!< [2..2] T3LD write sync in progress                                        */
      __IOM uint16_t CON        : 1;            /*!< [3..3] T3CON write sync in progress                                       */
      __IOM uint16_t LOCK       : 1;            /*!< [4..4] Lock status bit                                                    */
    } T3STA_b;
  } ;
} ADI_WDT_Type;                                 /*!< Size = 26 (0x1a)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADI_RTC                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief RealTimeClock (ADI_RTC)
  */

typedef struct {                                /*!< (@ 0x40002600) ADI_RTC Structure                                          */
  
  union {
    __IOM uint16_t RTCCR;                       /*!< (@ 0x00000000) RTC RTC Control                                            */
    
    struct {
      __IOM uint16_t CNTEN      : 1;            /*!< [0..0] Global enable for the RTC                                          */
      __IOM uint16_t ALMEN      : 1;            /*!< [1..1] Enable the RTC alarm operation                                     */
      __IOM uint16_t ALMINTEN   : 1;            /*!< [2..2] Enable ALMINT-sourced alarm interrupts to the CPU                  */
      __IOM uint16_t TRMEN      : 1;            /*!< [3..3] Enable RTC digital trimming                                        */
      __IOM uint16_t LCDEN      : 1;            /*!< [4..4] Enable RTC determination of when an LCD minute display
                                                     update should occur                                                       */
      __IOM uint16_t LCDUPDTIM  : 1;            /*!< [5..5] LCD update time in seconds beyond a one-minute boundary            */
      __IM  uint16_t            : 5;
      __IOM uint16_t LCDINTEN   : 1;            /*!< [11..11] Enable LCDINT-sourced LCD update interrupts to the
                                                     CPU                                                                       */
      __IOM uint16_t ISOINTEN   : 1;            /*!< [12..12] Enable ISOINT-sourced interrupts to the CPU when isolation
                                                     of the RTC power domain is activated and subsequently de-activated        */
      __IOM uint16_t WPENDERRINTEN : 1;         /*!< [13..13] Enable WPENDERRINT-sourced interrupts to the CPU when
                                                     an RTC register-write pending error occurs                                */
      __IOM uint16_t WSYNCINTEN : 1;            /*!< [14..14] Enable WSYNCINT-sourced interrupts to the CPU                    */
      __IOM uint16_t WPENDINTEN : 1;            /*!< [15..15] Enable WPENDINT-sourced interrupts to the CPU                    */
    } RTCCR_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t RTCSR0;                      /*!< (@ 0x00000004) RTC RTC Status 0                                           */
    
    struct {
      __IOM uint16_t RTCFAIL    : 1;            /*!< [0..0] RTC failure interrupt source                                       */
      __IOM uint16_t ALMINT     : 1;            /*!< [1..1] Alarm interrupt source                                             */
      __IOM uint16_t LCDINT     : 1;            /*!< [2..2] LCD update interrupt source                                        */
      __IOM uint16_t ISOINT     : 1;            /*!< [3..3] RTC power-domain isolation interrupt source                        */
      __IOM uint16_t WPENDERRINT : 1;           /*!< [4..4] Write pending error interrupt source                               */
      __IOM uint16_t WSYNCINT   : 1;            /*!< [5..5] Write synchronisation interrupt                                    */
      __IOM uint16_t WPENDINT   : 1;            /*!< [6..6] Write pending interrupt                                            */
      __IOM uint16_t WSYNCCR    : 1;            /*!< [7..7] Synchronisation status of posted writes to RTCCR                   */
      __IOM uint16_t WSYNCSR0   : 1;            /*!< [8..8] Synchronisation status of posted clearances to interrupt
                                                     sources in RTCSR0                                                         */
      __IOM uint16_t WSYNCCNT0  : 1;            /*!< [9..9] Synchronisation status of posted writes to RTCCNT0                 */
      __IOM uint16_t WSYNCCNT1  : 1;            /*!< [10..10] Synchronisation status of posted writes to RTCCNT1               */
      __IOM uint16_t WSYNCALM0  : 1;            /*!< [11..11] Synchronisation status of posted writes to RTCALM0               */
      __IOM uint16_t WSYNCALM1  : 1;            /*!< [12..12] Synchronisation status of posted writes to RTCALM1               */
      __IOM uint16_t WSYNCTRM   : 1;            /*!< [13..13] Synchronisation status of posted writes to RTCTRM                */
    } RTCSR0_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t RTCSR1;                      /*!< (@ 0x00000008) RTC RTC Status 1                                           */
    
    struct {
      __IM  uint16_t            : 3;
      __IOM uint16_t WERRCODE   : 1;            /*!< [3..3] Identifier for the source of a write synchronisation
                                                     error                                                                     */
      __IM  uint16_t            : 3;
      __IOM uint16_t WPENDCR    : 1;            /*!< [7..7] Pending status of posted writes to RTCCR                           */
      __IOM uint16_t WPENDSR0   : 1;            /*!< [8..8] Pending status of posted clearances of interrupt sources
                                                     in RTCSR0                                                                 */
      __IOM uint16_t WPENDCNT0  : 1;            /*!< [9..9] Pending status of posted writes to RTCCNT0                         */
      __IOM uint16_t WPENDCNT1  : 1;            /*!< [10..10] Pending status of posted writes to RTCCNT1                       */
      __IOM uint16_t WPENDALM0  : 1;            /*!< [11..11] Pending status of posted writes to RTCALM0                       */
      __IOM uint16_t WPENDALM1  : 1;            /*!< [12..12] Pending status of posted writes to RTCALM1                       */
      __IOM uint16_t WPENDTRM   : 1;            /*!< [13..13] Pending status of posted writes to RTCTRM                        */
    } RTCSR1_b;
  } ;
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  RTCCNT0;                      /*!< (@ 0x0000000C) RTC RTC Count 0                                            */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  RTCCNT1;                      /*!< (@ 0x00000010) RTC RTC Count 1                                            */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  RTCALM0;                      /*!< (@ 0x00000014) RTC RTC Alarm 0                                            */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  RTCALM1;                      /*!< (@ 0x00000018) RTC RTC Alarm 1                                            */
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t RTCTRM;                      /*!< (@ 0x0000001C) RTC RTC Trim                                               */
    
    struct {
      __IOM uint16_t TRMVAL     : 1;            /*!< [0..0] Trim value in whole seconds to be added or subtracted
                                                     from the RTC count at the end of a periodic interval                      */
      __IM  uint16_t            : 2;
      __IOM uint16_t TRMADD     : 1;            /*!< [3..3] Trim polarity                                                      */
      __IOM uint16_t TRMIVL     : 1;            /*!< [4..4] Trim interval in units of seconds                                  */
    } RTCTRM_b;
  } ;
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  RTCGWY;                       /*!< (@ 0x00000020) RTC RTC Gateway                                            */
} ADI_RTC_Type;                                 /*!< Size = 34 (0x22)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADI_I2C                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C Master/Slave (ADI_I2C)
  */

typedef struct {                                /*!< (@ 0x40003000) ADI_I2C Structure                                          */
  
  union {
    __IOM uint16_t I2CMCON;                     /*!< (@ 0x00000000) I2C Master control                                         */
    
    struct {
      __IOM uint16_t MASEN      : 1;            /*!< [0..0] Master enable                                                      */
      __IOM uint16_t COMPLETE   : 1;            /*!< [1..1] Start back-off disable                                             */
      __IOM uint16_t LOOPBACK   : 1;            /*!< [2..2] Internal loopback enable                                           */
      __IOM uint16_t STRETCH    : 1;            /*!< [3..3] Stretch SCL enable                                                 */
      __IOM uint16_t IENMRX     : 1;            /*!< [4..4] Receive request interrupt enable                                   */
      __IOM uint16_t IENMTX     : 1;            /*!< [5..5] Transmit request interrupt enable.                                 */
      __IOM uint16_t IENALOST   : 1;            /*!< [6..6] Arbitration lost interrupt enable                                  */
      __IOM uint16_t IENACK     : 1;            /*!< [7..7] ACK not received interrupt enable                                  */
      __IOM uint16_t IENCMP     : 1;            /*!< [8..8] Transaction completed (or stop detected) interrupt enable          */
      __IOM uint16_t MXMITDEC   : 1;            /*!< [9..9] Decrement master TX FIFO status when a byte has been
                                                     transmitted                                                               */
      __IOM uint16_t MRXDMA     : 1;            /*!< [10..10] Enable master Rx DMA request                                     */
      __IOM uint16_t MTXDMA     : 1;            /*!< [11..11] Enable master Tx DMA request                                     */
      __IOM uint16_t BUS        : 1;            /*!< [12..12] Bus-Clear Enable                                                 */
      __IOM uint16_t PRESTOP    : 1;            /*!< [13..13] Prestop Bus-Clear                                                */
    } I2CMCON_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t I2CMSTA;                     /*!< (@ 0x00000004) I2C Master status                                          */
    
    struct {
      __IOM uint16_t MTXFSTA    : 1;            /*!< [0..0] Master Transmit FIFO status                                        */
      __IM  uint16_t            : 1;
      __IOM uint16_t MTXREQ     : 1;            /*!< [2..2] Master Transmit request                                            */
      __IOM uint16_t MRXREQ     : 1;            /*!< [3..3] Master Receive request                                             */
      __IOM uint16_t NACKADDR   : 1;            /*!< [4..4] ACK not received in response to an address                         */
      __IOM uint16_t ALOST      : 1;            /*!< [5..5] Arbitration lost                                                   */
      __IOM uint16_t MBUSY      : 1;            /*!< [6..6] Master busy                                                        */
      __IOM uint16_t NACKDATA   : 1;            /*!< [7..7] ACK not received in response to data write                         */
      __IOM uint16_t TCOMP      : 1;            /*!< [8..8] Transaction complete or stop detected                              */
      __IOM uint16_t MRXOF      : 1;            /*!< [9..9] Master Receive FIFO overflow                                       */
      __IOM uint16_t LINEBUSY   : 1;            /*!< [10..10] Line is busy                                                     */
      __IOM uint16_t MSTOP      : 1;            /*!< [11..11] STOP driven by this I2C Master                                   */
      __IOM uint16_t MTXUFLOW   : 1;            /*!< [12..12] Master Transmit Underflow                                        */
      __IOM uint16_t SDA        : 1;            /*!< [13..13] State of SDA Line                                                */
      __IOM uint16_t SCL        : 1;            /*!< [14..14] State of SCL Line                                                */
    } I2CMSTA_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t I2CMRX;                      /*!< (@ 0x00000008) I2C Master receive data                                    */
    
    struct {
      __IOM uint16_t I2CMRX     : 1;            /*!< [0..0] Master receive register                                            */
    } I2CMRX_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t I2CMTX;                      /*!< (@ 0x0000000C) I2C Master transmit data                                   */
    
    struct {
      __IOM uint16_t I2CMTX     : 1;            /*!< [0..0] Master transmit register                                           */
    } I2CMTX_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t I2CMRXCNT;                   /*!< (@ 0x00000010) I2C Master receive data count                              */
    
    struct {
      __IOM uint16_t COUNT      : 1;            /*!< [0..0] Receive count                                                      */
      __IM  uint16_t            : 7;
      __IOM uint16_t EXTEND     : 1;            /*!< [8..8] Extended read                                                      */
    } I2CMRXCNT_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IOM uint16_t I2CMCRXCNT;                  /*!< (@ 0x00000014) I2C Master current receive data count                      */
    
    struct {
      __IOM uint16_t COUNT      : 1;            /*!< [0..0] Current receive count                                              */
    } I2CMCRXCNT_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IOM uint16_t I2CADR1;                     /*!< (@ 0x00000018) I2C 1st master address byte                                */
    
    struct {
      __IOM uint16_t ADR1       : 1;            /*!< [0..0] Address byte 1                                                     */
    } I2CADR1_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t I2CADR2;                     /*!< (@ 0x0000001C) I2C 2nd master address byte                                */
    
    struct {
      __IOM uint16_t ADR2       : 1;            /*!< [0..0] Address byte 2                                                     */
    } I2CADR2_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t I2CBYT;                      /*!< (@ 0x00000020) I2C Start byte                                             */
    
    struct {
      __IOM uint16_t SBYTE      : 1;            /*!< [0..0] Start byte                                                         */
    } I2CBYT_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint16_t I2CDIV;                      /*!< (@ 0x00000024) I2C Serial clock period divisor                            */
    
    struct {
      __IOM uint16_t LOW        : 1;            /*!< [0..0] Serial clock low time                                              */
      __IM  uint16_t            : 7;
      __IOM uint16_t HIGH       : 1;            /*!< [8..8] Serial clock high time                                             */
    } I2CDIV_b;
  } ;
  __IM  uint16_t  RESERVED9;
  
  union {
    __IOM uint16_t I2CSCON;                     /*!< (@ 0x00000028) I2C Slave control                                          */
    
    struct {
      __IOM uint16_t SLVEN      : 1;            /*!< [0..0] Slave enable                                                       */
      __IOM uint16_t ADR10EN    : 1;            /*!< [1..1] Enabled 10-bit addressing                                          */
      __IOM uint16_t GCEN       : 1;            /*!< [2..2] General call enable                                                */
      __IOM uint16_t HGCEN      : 1;            /*!< [3..3] Hardware general call enable                                       */
      __IOM uint16_t GCSBCLR    : 1;            /*!< [4..4] General call status bit clear                                      */
      __IOM uint16_t EARLYTXR   : 1;            /*!< [5..5] Early transmit request mode                                        */
      __IOM uint16_t STRETCHSCL : 1;            /*!< [6..6] Stretch SCL enable                                                 */
      __IOM uint16_t NACK       : 1;            /*!< [7..7] NACK next communication                                            */
      __IOM uint16_t IENSTOP    : 1;            /*!< [8..8] Stop condition detected interrupt enable                           */
      __IOM uint16_t IENSRX     : 1;            /*!< [9..9] Slave Receive request interrupt enable                             */
      __IOM uint16_t IENSTX     : 1;            /*!< [10..10] Slave Transmit request interrupt enable                          */
      __IOM uint16_t SXMITDEC   : 1;            /*!< [11..11] Decrement Slave Tx FIFO status when a byte has been
                                                     transmitted                                                               */
      __IOM uint16_t IENREPST   : 1;            /*!< [12..12] Repeated start interrupt enable                                  */
      __IOM uint16_t SRXDMA     : 1;            /*!< [13..13] Enable slave Rx DMA request                                      */
      __IOM uint16_t STXDMA     : 1;            /*!< [14..14] Enable slave Tx DMA request                                      */
    } I2CSCON_b;
  } ;
  __IM  uint16_t  RESERVED10;
  
  union {
    __IOM uint16_t I2CSSTA;                     /*!< (@ 0x0000002C) I2C Slave I2C Status/Error/IRQ                             */
    
    struct {
      __IOM uint16_t STXFSEREQ  : 1;            /*!< [0..0] Slave Tx FIFO Status or early request                              */
      __IOM uint16_t STXUR      : 1;            /*!< [1..1] Slave Transmit FIFO underflow                                      */
      __IOM uint16_t STXREQ     : 1;            /*!< [2..2] Slave Transmit request                                             */
      __IOM uint16_t SRXREQ     : 1;            /*!< [3..3] Slave Receive request                                              */
      __IOM uint16_t SRXOF      : 1;            /*!< [4..4] Slave Receive FIFO overflow                                        */
      __IOM uint16_t NOACK      : 1;            /*!< [5..5] Ack not generated by the slave                                     */
      __IOM uint16_t SBUSY      : 1;            /*!< [6..6] Slave busy                                                         */
      __IOM uint16_t GCINT      : 1;            /*!< [7..7] General call interrupt                                             */
      __IOM uint16_t GCID       : 1;            /*!< [8..8] General ID                                                         */
      __IM  uint16_t            : 1;
      __IOM uint16_t STOP       : 1;            /*!< [10..10] Stop after start and matching address                            */
      __IOM uint16_t IDMAT      : 1;            /*!< [11..11] Device ID matched                                                */
      __IM  uint16_t            : 1;
      __IOM uint16_t REPSTART   : 1;            /*!< [13..13] Repeated start and matching address                              */
      __IOM uint16_t START      : 1;            /*!< [14..14] Start and matching address                                       */
    } I2CSSTA_b;
  } ;
  __IM  uint16_t  RESERVED11;
  
  union {
    __IOM uint16_t I2CSRX;                      /*!< (@ 0x00000030) I2C Slave receive                                          */
    
    struct {
      __IOM uint16_t I2CSRX     : 1;            /*!< [0..0] Slave receive register                                             */
    } I2CSRX_b;
  } ;
  __IM  uint16_t  RESERVED12;
  
  union {
    __IOM uint16_t I2CSTX;                      /*!< (@ 0x00000034) I2C Slave transmit                                         */
    
    struct {
      __IOM uint16_t I2CSTX     : 1;            /*!< [0..0] Slave transmit register                                            */
    } I2CSTX_b;
  } ;
  __IM  uint16_t  RESERVED13;
  
  union {
    __IOM uint16_t I2CALT;                      /*!< (@ 0x00000038) I2C Hardware general call ID                               */
    
    struct {
      __IOM uint16_t ALT        : 1;            /*!< [0..0] Slave Alt                                                          */
    } I2CALT_b;
  } ;
  __IM  uint16_t  RESERVED14;
  
  union {
    __IOM uint16_t I2CID0;                      /*!< (@ 0x0000003C) I2C 1st slave address device ID                            */
    
    struct {
      __IOM uint16_t ID0        : 1;            /*!< [0..0] Slave device ID 0                                                  */
    } I2CID0_b;
  } ;
  __IM  uint16_t  RESERVED15;
  
  union {
    __IOM uint16_t I2CID1;                      /*!< (@ 0x00000040) I2C 2nd slave address device ID                            */
    
    struct {
      __IOM uint16_t ID1        : 1;            /*!< [0..0] Slave device ID 1                                                  */
    } I2CID1_b;
  } ;
  __IM  uint16_t  RESERVED16;
  
  union {
    __IOM uint16_t I2CID2;                      /*!< (@ 0x00000044) I2C 3rd slave address device ID                            */
    
    struct {
      __IOM uint16_t ID2        : 1;            /*!< [0..0] Slave device ID 2                                                  */
    } I2CID2_b;
  } ;
  __IM  uint16_t  RESERVED17;
  
  union {
    __IOM uint16_t I2CID3;                      /*!< (@ 0x00000048) I2C 4th slave address device ID                            */
    
    struct {
      __IOM uint16_t ID3        : 1;            /*!< [0..0] Slave device ID 3                                                  */
    } I2CID3_b;
  } ;
  __IM  uint16_t  RESERVED18;
  
  union {
    __IOM uint16_t I2CFSTA;                     /*!< (@ 0x0000004C) I2C Master and slave FIFO status                           */
    
    struct {
      __IOM uint16_t STXFSTA    : 1;            /*!< [0..0] Slave transmit FIFO status                                         */
      __IM  uint16_t            : 1;
      __IOM uint16_t SRXFSTA    : 1;            /*!< [2..2] Slave receive FIFO status                                          */
      __IM  uint16_t            : 1;
      __IOM uint16_t MTXFSTA    : 1;            /*!< [4..4] Master transmit FIFO status                                        */
      __IM  uint16_t            : 1;
      __IOM uint16_t MRXFSTA    : 1;            /*!< [6..6] Master receive FIFO status                                         */
      __IM  uint16_t            : 1;
      __IOM uint16_t SFLUSH     : 1;            /*!< [8..8] Flush the slave transmit FIFO                                      */
      __IOM uint16_t MFLUSH     : 1;            /*!< [9..9] Flush the master transmit FIFO                                     */
    } I2CFSTA_b;
  } ;
  __IM  uint16_t  RESERVED19;
  
  union {
    __IOM uint16_t I2CSHCON;                    /*!< (@ 0x00000050) I2C Shared control                                         */
    
    struct {
      __IOM uint16_t RESET      : 1;            /*!< [0..0] Reset START STOP detect circuit                                    */
    } I2CSHCON_b;
  } ;
  __IM  uint16_t  RESERVED20;
  
  union {
    __IOM uint16_t I2CTCTL;                     /*!< (@ 0x00000054) I2C Timing Control Register                                */
    
    struct {
      __IOM uint16_t THDATIN    : 1;            /*!< [0..0] Data In Hold Start                                                 */
      __IM  uint16_t            : 7;
      __IOM uint16_t FILTEROFF  : 1;            /*!< [8..8] Input Filter Control                                               */
    } I2CTCTL_b;
  } ;
} ADI_I2C_Type;                                 /*!< Size = 86 (0x56)                                                          */



/* =========================================================================================================================== */
/* ================                                         ADI_SPI0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI0 Maste/Slave (ADI_SPI0)
  */

typedef struct {                                /*!< (@ 0x40004000) ADI_SPI0 Structure                                         */
  
  union {
    __IOM uint32_t SPISTA;                      /*!< (@ 0x00000000) SPI0 Status                                                */
    
    struct {
      __IOM uint32_t IRQ        : 1;            /*!< [0..0] SPI Interrupt status                                               */
      __IOM uint32_t TXFSTA     : 1;            /*!< [1..1] SPI Tx FIFO status                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t TXUR       : 1;            /*!< [4..4] SPI Tx FIFO underflow                                              */
      __IOM uint32_t TX         : 1;            /*!< [5..5] SPI Tx IRQ                                                         */
      __IOM uint32_t RX         : 1;            /*!< [6..6] SPI Rx IRQ                                                         */
      __IOM uint32_t RXOF       : 1;            /*!< [7..7] SPI Rx FIFO overflow                                               */
      __IOM uint32_t RXFSTA     : 1;            /*!< [8..8] SPI Rx FIFO status                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t RXS        : 1;            /*!< [11..11] SPI Rx FIFO excess bytes present                                 */
      __IOM uint32_t CSERR      : 1;            /*!< [12..12] Detected a CS error condition                                    */
      __IOM uint32_t CSFLG      : 1;            /*!< [13..13] Detected a falling edge on CS, in CONT mode                      */
      __IOM uint32_t CSRSG      : 1;            /*!< [14..14] Detected a rising edge on CS, in CONT mode                       */
    } SPISTA_b;
  } ;
  
  union {
    __IOM uint16_t SPIRX;                       /*!< (@ 0x00000004) SPI0 Receive                                               */
    
    struct {
      __IOM uint16_t DATA       : 1;            /*!< [0..0] 8-bit receive buffer                                               */
      __IM  uint16_t            : 7;
      __IOM uint16_t DMA        : 1;            /*!< [8..8] 8-bit receive buffer                                               */
    } SPIRX_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t SPITX;                       /*!< (@ 0x00000008) SPI0 Transmit                                              */
    
    struct {
      __IOM uint16_t DATA       : 1;            /*!< [0..0] 8-bit transmit buffer                                              */
      __IM  uint16_t            : 7;
      __IOM uint16_t DMA        : 1;            /*!< [8..8] 8-bit transmit buffer                                              */
    } SPITX_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t SPIDIV;                      /*!< (@ 0x0000000C) SPI0 Baud rate selection                                   */
    
    struct {
      __IOM uint16_t DIV        : 1;            /*!< [0..0] SPI clock divider                                                  */
      __IM  uint16_t            : 5;
      __IOM uint16_t HFM        : 1;            /*!< [6..6] High Frequency Mode                                                */
      __IOM uint16_t MD         : 1;            /*!< [7..7] Reset Mode for CSERR                                               */
      __IOM uint16_t CSIRQ      : 1;            /*!< [8..8] Enable interrupt on every CS edge in CONT mode                     */
    } SPIDIV_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t SPICON;                      /*!< (@ 0x00000010) SPI0 SPI configuration                                     */
    
    struct {
      __IOM uint16_t ENABLE     : 1;            /*!< [0..0] SPI enable                                                         */
      __IOM uint16_t MASEN      : 1;            /*!< [1..1] Master mode enable                                                 */
      __IOM uint16_t CPHA       : 1;            /*!< [2..2] Serial clock phase mode                                            */
      __IOM uint16_t CPOL       : 1;            /*!< [3..3] Serial Clock Polarity                                              */
      __IOM uint16_t WOM        : 1;            /*!< [4..4] SPI Wired Or mode                                                  */
      __IOM uint16_t LSB        : 1;            /*!< [5..5] LSB first transfer enable                                          */
      __IOM uint16_t TIM        : 1;            /*!< [6..6] SPI transfer and interrupt mode                                    */
      __IOM uint16_t ZEN        : 1;            /*!< [7..7] Transmit zeros enable                                              */
      __IOM uint16_t RXOF       : 1;            /*!< [8..8] SPIRX overflow overwrite enable                                    */
      __IOM uint16_t OEN        : 1;            /*!< [9..9] Slave MISO output enable                                           */
      __IOM uint16_t LOOPBACK   : 1;            /*!< [10..10] Loopback enable                                                  */
      __IOM uint16_t CON        : 1;            /*!< [11..11] Continuous transfer enable                                       */
      __IOM uint16_t RFLUSH     : 1;            /*!< [12..12] SPI Rx FIFO Flush enable                                         */
      __IOM uint16_t TFLUSH     : 1;            /*!< [13..13] SPI Tx FIFO Flush enable                                         */
      __IOM uint16_t MOD        : 1;            /*!< [14..14] SPI IRQ mode bits                                                */
    } SPICON_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t SPIDMA;                      /*!< (@ 0x00000014) SPI0 SPI DMA enable                                        */
    
    struct {
      __IOM uint16_t ENABLE     : 1;            /*!< [0..0] Enable DMA for data transfer                                       */
      __IOM uint16_t IENTXDMA   : 1;            /*!< [1..1] Enable transmit DMA request                                        */
      __IOM uint16_t IENRXDMA   : 1;            /*!< [2..2] Enable receive DMA request                                         */
    } SPIDMA_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IOM uint16_t SPICNT;                      /*!< (@ 0x00000018) SPI0 Transfer byte count                                   */
    
    struct {
      __IOM uint16_t COUNT      : 1;            /*!< [0..0] Transfer byte count                                                */
    } SPICNT_b;
  } ;
} ADI_SPI0_Type;                                /*!< Size = 26 (0x1a)                                                          */



/* =========================================================================================================================== */
/* ================                                         ADI_SPI1                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI1 Master/Slave (ADI_SPI1)
  */

typedef struct {                                /*!< (@ 0x40004400) ADI_SPI1 Structure                                         */
  
  union {
    __IOM uint32_t SPISTA;                      /*!< (@ 0x00000000) SPI1 Status                                                */
    
    struct {
      __IOM uint32_t IRQ        : 1;            /*!< [0..0] SPI Interrupt status                                               */
      __IOM uint32_t TXFSTA     : 1;            /*!< [1..1] SPI Tx FIFO status                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t TXUR       : 1;            /*!< [4..4] SPI Tx FIFO underflow                                              */
      __IOM uint32_t TX         : 1;            /*!< [5..5] SPI Tx IRQ                                                         */
      __IOM uint32_t RX         : 1;            /*!< [6..6] SPI Rx IRQ                                                         */
      __IOM uint32_t RXOF       : 1;            /*!< [7..7] SPI Rx FIFO overflow                                               */
      __IOM uint32_t RXFSTA     : 1;            /*!< [8..8] SPI Rx FIFO status                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t RXS        : 1;            /*!< [11..11] SPI Rx FIFO excess bytes present                                 */
      __IOM uint32_t CSERR      : 1;            /*!< [12..12] Detected a CS error condition                                    */
      __IOM uint32_t CSFLG      : 1;            /*!< [13..13] Detected a falling edge on CS, in CONT mode                      */
      __IOM uint32_t CSRSG      : 1;            /*!< [14..14] Detected a rising edge on CS, in CONT mode                       */
    } SPISTA_b;
  } ;
  
  union {
    __IOM uint32_t SPIRX;                       /*!< (@ 0x00000004) SPI1 Receive                                               */
    
    struct {
      __IOM uint32_t DATA       : 1;            /*!< [0..0] 8-bit receive buffer                                               */
      __IM  uint32_t            : 7;
      __IOM uint32_t DMA        : 1;            /*!< [8..8] 8-bit receive buffer                                               */
    } SPIRX_b;
  } ;
  
  union {
    __IOM uint32_t SPITX;                       /*!< (@ 0x00000008) SPI1 Transmit                                              */
    
    struct {
      __IOM uint32_t DATA       : 1;            /*!< [0..0] 8-bit transmit buffer                                              */
      __IM  uint32_t            : 7;
      __IOM uint32_t DMA        : 1;            /*!< [8..8] 8-bit transmit buffer                                              */
    } SPITX_b;
  } ;
  
  union {
    __IOM uint32_t SPIDIV;                      /*!< (@ 0x0000000C) SPI1 Baud rate selection                                   */
    
    struct {
      __IOM uint32_t DIV        : 1;            /*!< [0..0] SPI clock divider                                                  */
      __IM  uint32_t            : 5;
      __IOM uint32_t HFM        : 1;            /*!< [6..6] High Frequency Mode                                                */
      __IOM uint32_t MD         : 1;            /*!< [7..7] Reset Mode for CSERR                                               */
      __IOM uint32_t CSIRQ      : 1;            /*!< [8..8] Enable interrupt on every CS edge in CONT mode                     */
    } SPIDIV_b;
  } ;
  
  union {
    __IOM uint32_t SPICON;                      /*!< (@ 0x00000010) SPI1 SPI configuration                                     */
    
    struct {
      __IOM uint32_t ENABLE     : 1;            /*!< [0..0] SPI enable                                                         */
      __IOM uint32_t MASEN      : 1;            /*!< [1..1] Master mode enable                                                 */
      __IOM uint32_t CPHA       : 1;            /*!< [2..2] Serial clock phase mode                                            */
      __IOM uint32_t CPOL       : 1;            /*!< [3..3] Serial Clock Polarity                                              */
      __IOM uint32_t WOM        : 1;            /*!< [4..4] SPI Wired Or mode                                                  */
      __IOM uint32_t LSB        : 1;            /*!< [5..5] LSB first transfer enable                                          */
      __IOM uint32_t TIM        : 1;            /*!< [6..6] SPI transfer and interrupt mode                                    */
      __IOM uint32_t ZEN        : 1;            /*!< [7..7] Transmit zeros enable                                              */
      __IOM uint32_t RXOF       : 1;            /*!< [8..8] SPIRX overflow overwrite enable                                    */
      __IOM uint32_t OEN        : 1;            /*!< [9..9] Slave MISO output enable                                           */
      __IOM uint32_t LOOPBACK   : 1;            /*!< [10..10] Loopback enable                                                  */
      __IOM uint32_t CON        : 1;            /*!< [11..11] Continuous transfer enable                                       */
      __IOM uint32_t RFLUSH     : 1;            /*!< [12..12] SPI Rx FIFO Flush enable                                         */
      __IOM uint32_t TFLUSH     : 1;            /*!< [13..13] SPI Tx FIFO Flush enable                                         */
      __IOM uint32_t MOD        : 1;            /*!< [14..14] SPI IRQ mode bits                                                */
    } SPICON_b;
  } ;
  
  union {
    __IOM uint32_t SPIDMA;                      /*!< (@ 0x00000014) SPI1 SPI DMA enable                                        */
    
    struct {
      __IOM uint32_t ENABLE     : 1;            /*!< [0..0] Enable DMA for data transfer                                       */
      __IOM uint32_t IENTXDMA   : 1;            /*!< [1..1] Enable transmit DMA request                                        */
      __IOM uint32_t IENRXDMA   : 1;            /*!< [2..2] Enable receive DMA request                                         */
    } SPIDMA_b;
  } ;
  
  union {
    __IOM uint32_t SPICNT;                      /*!< (@ 0x00000018) SPI1 Transfer byte count                                   */
    
    struct {
      __IOM uint32_t COUNT      : 1;            /*!< [0..0] Transfer byte count                                                */
    } SPICNT_b;
  } ;
} ADI_SPI1_Type;                                /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                         ADI_UART                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Uart (ADI_UART)
  */

typedef struct {                                /*!< (@ 0x40005000) ADI_UART Structure                                         */
  
  union {
    __IOM uint32_t COMRX;                       /*!< (@ 0x00000000) UART Receive Buffer Register                               */
    
    struct {
      __IOM uint32_t RBR        : 1;            /*!< [0..0] Receive Buffer Register                                            */
    } COMRX_b;
  } ;
  
  union {
    __IOM uint16_t COMIEN;                      /*!< (@ 0x00000004) UART Interrupt Enable                                      */
    
    struct {
      __IOM uint16_t ERBFI      : 1;            /*!< [0..0] Receive buffer full interrupt                                      */
      __IOM uint16_t ETBEI      : 1;            /*!< [1..1] Transmit buffer empty interrupt                                    */
      __IOM uint16_t ELSI       : 1;            /*!< [2..2] Rx status interrupt                                                */
      __IOM uint16_t EDSSI      : 1;            /*!< [3..3] Modem status interrupt                                             */
      __IOM uint16_t EDMAT      : 1;            /*!< [4..4] DMA requests in receive mode                                       */
      __IOM uint16_t EDMAR      : 1;            /*!< [5..5] DMA requests in transmit mode                                      */
    } COMIEN_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t COMIIR;                      /*!< (@ 0x00000008) UART Interrupt ID                                          */
    
    struct {
      __IOM uint16_t NIRQ       : 1;            /*!< [0..0] Interrupt flag                                                     */
      __IOM uint16_t STA        : 1;            /*!< [1..1] Interrupt status                                                   */
    } COMIIR_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t COMLCR;                      /*!< (@ 0x0000000C) UART Line Control                                          */
    
    struct {
      __IOM uint16_t WLS        : 1;            /*!< [0..0] Word Length Select                                                 */
      __IM  uint16_t            : 1;
      __IOM uint16_t STOP       : 1;            /*!< [2..2] Stop Bit                                                           */
      __IOM uint16_t PEN        : 1;            /*!< [3..3] Parity Enable                                                      */
      __IOM uint16_t EPS        : 1;            /*!< [4..4] Parity Select                                                      */
      __IOM uint16_t SP         : 1;            /*!< [5..5] Stick Parity                                                       */
      __IOM uint16_t BRK        : 1;            /*!< [6..6] Set Break                                                          */
    } COMLCR_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t COMMCR;                      /*!< (@ 0x00000010) UART Modem Control                                         */
    
    struct {
      __IOM uint16_t DTR        : 1;            /*!< [0..0] Data Terminal Ready                                                */
      __IOM uint16_t RTS        : 1;            /*!< [1..1] Request to send                                                    */
      __IOM uint16_t OUT1       : 1;            /*!< [2..2] Output 1                                                           */
      __IOM uint16_t OUT2       : 1;            /*!< [3..3] Output 2                                                           */
      __IOM uint16_t LOOPBACK   : 1;            /*!< [4..4] Loopback mode                                                      */
    } COMMCR_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t COMLSR;                      /*!< (@ 0x00000014) UART Line Status                                           */
    
    struct {
      __IOM uint16_t DR         : 1;            /*!< [0..0] Data Ready                                                         */
      __IOM uint16_t OE         : 1;            /*!< [1..1] Overrun Error                                                      */
      __IOM uint16_t PE         : 1;            /*!< [2..2] Parity Error                                                       */
      __IOM uint16_t FE         : 1;            /*!< [3..3] Framing Error                                                      */
      __IOM uint16_t BI         : 1;            /*!< [4..4] Break Indicator                                                    */
      __IOM uint16_t THRE       : 1;            /*!< [5..5] COMTX Empty                                                        */
      __IOM uint16_t TEMT       : 1;            /*!< [6..6] COMTX and Shift Register Empty Status                              */
    } COMLSR_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IOM uint16_t COMMSR;                      /*!< (@ 0x00000018) UART Modem Status                                          */
    
    struct {
      __IOM uint16_t DCTS       : 1;            /*!< [0..0] Delta CTS                                                          */
      __IOM uint16_t DDSR       : 1;            /*!< [1..1] Delta DSR                                                          */
      __IOM uint16_t TERI       : 1;            /*!< [2..2] Trailing Edge RI                                                   */
      __IOM uint16_t DDCD       : 1;            /*!< [3..3] Delta DCD                                                          */
      __IOM uint16_t CTS        : 1;            /*!< [4..4] Clear To Send                                                      */
      __IOM uint16_t DSR        : 1;            /*!< [5..5] Data Set Ready                                                     */
      __IOM uint16_t RI         : 1;            /*!< [6..6] Ring Indicator                                                     */
      __IOM uint16_t DCD        : 1;            /*!< [7..7] Data Carrier Detect                                                */
    } COMMSR_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IOM uint16_t COMSCR;                      /*!< (@ 0x0000001C) UART Scratch buffer                                        */
    
    struct {
      __IOM uint16_t SCR        : 1;            /*!< [0..0] Scratch                                                            */
    } COMSCR_b;
  } ;
  __IM  uint16_t  RESERVED6[3];
  
  union {
    __IOM uint16_t COMFBR;                      /*!< (@ 0x00000024) UART Fractional Baud Rate                                  */
    
    struct {
      __IOM uint16_t DIVN       : 1;            /*!< [0..0] Fractional baud rate N divide bits 0 to 2047.                      */
      __IM  uint16_t            : 10;
      __IOM uint16_t DIVM       : 1;            /*!< [11..11] Fractional baud rate M divide bits 1 to 3                        */
      __IM  uint16_t            : 3;
      __IOM uint16_t FBEN       : 1;            /*!< [15..15] Fractional baud rate generator enable                            */
    } COMFBR_b;
  } ;
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  COMDIV;                       /*!< (@ 0x00000028) UART Baudrate divider                                      */
} ADI_UART_Type;                                /*!< Size = 42 (0x2a)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADI_I2S                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief I2S Master/Slave (ADI_I2S)
  */

typedef struct {                                /*!< (@ 0x40005800) ADI_I2S Structure                                          */
  
  union {
    __IOM uint16_t OUT1L;                       /*!< (@ 0x00000000) I2S Channel 1 LSBs                                         */
    
    struct {
      __IM  uint16_t            : 8;
      __IOM uint16_t OUT1_LSB   : 8;            /*!< [15..8] I2S Ch1 lsb                                                       */
    } OUT1L_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t OUT1H;                       /*!< (@ 0x00000004) I2S Channel 1 MSBs                                         */
    
    struct {
      __IM  uint16_t            : 8;
      __IOM uint16_t OUT1_MSB   : 8;            /*!< [15..8] I2S Ch1 msb                                                       */
    } OUT1H_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t OUT2L;                       /*!< (@ 0x00000008) I2S Channel 2 LSBs                                         */
    
    struct {
      __IM  uint16_t            : 8;
      __IOM uint16_t OUT2_LSB   : 8;            /*!< [15..8] I2S Ch2 lsb                                                       */
    } OUT2L_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t OUT2H;                       /*!< (@ 0x0000000C) I2S Channel 2 MSBs                                         */
    
    struct {
      __IM  uint16_t            : 8;
      __IOM uint16_t OUT2_MSB   : 8;            /*!< [15..8] I2S Ch2 msb                                                       */
    } OUT2H_b;
  } ;
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  MODE1;                        /*!< (@ 0x00000010) I2S I2S format modes 1                                     */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  MODE2;                        /*!< (@ 0x00000014) I2S I2S format modes 2                                     */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  CFG1;                         /*!< (@ 0x00000018) I2S I2S configuration 1                                    */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  CFG2;                         /*!< (@ 0x0000001C) I2S I2S configuration 2                                    */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  STAT;                         /*!< (@ 0x00000020) I2S I2S status                                             */
} ADI_I2S_Type;                                 /*!< Size = 34 (0x22)                                                          */



/* =========================================================================================================================== */
/* ================                                         ADI_BEEP                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Beeper (ADI_BEEP)
  */

typedef struct {                                /*!< (@ 0x40005C00) ADI_BEEP Structure                                         */
  __IOM uint16_t  BEEP_CFG;                     /*!< (@ 0x00000000) BEEP Beeper configuration                                  */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  STAT;                         /*!< (@ 0x00000004) BEEP Beeper status                                         */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  TONE_A;                       /*!< (@ 0x00000008) BEEP Tone A Data                                           */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  TONE_B;                       /*!< (@ 0x0000000C) BEEP Tone B Data                                           */
} ADI_BEEP_Type;                                /*!< Size = 14 (0xe)                                                           */



/* =========================================================================================================================== */
/* ================                                          ADI_RNG                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Random Bit Generator (ADI_RNG)
  */

typedef struct {                                /*!< (@ 0x40006000) ADI_RNG Structure                                          */
  
  union {
    __IOM uint16_t RNGCTL;                      /*!< (@ 0x00000000) RNG RNG Control Register                                   */
    
    struct {
      __IOM uint16_t RNGEN      : 1;            /*!< [0..0] RNG Enable                                                         */
      __IOM uint16_t CNTEN      : 1;            /*!< [1..1] Oscillator Counter Enable                                          */
      __IOM uint16_t TMRMODE    : 1;            /*!< [2..2] Timer Mode                                                         */
    } RNGCTL_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t RNGLEN;                      /*!< (@ 0x00000004) RNG RNG Sample Length Register                             */
    
    struct {
      __IOM uint16_t LENRLD     : 12;           /*!< [11..0] Reload value for the sample counter                               */
      __IOM uint16_t LENPRE     : 4;            /*!< [15..12] Prescaler for the sample counter                                 */
    } RNGLEN_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t RNGSTAT;                     /*!< (@ 0x00000008) RNG RNG Status Register                                    */
    
    struct {
      __IOM uint16_t RNGRDY     : 1;            /*!< [0..0] Random number ready                                                */
    } RNGSTAT_b;
  } ;
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  RNGDATA;                      /*!< (@ 0x0000000C) RNG RNG Data Register                                      */
  __IM  uint16_t  RESERVED3;
  __IM  uint16_t  RNGCNTL;                      /*!< (@ 0x00000010) RNG Oscillator Count Low                                   */
  __IM  uint16_t  RESERVED4;
  
  union {
    __IM  uint16_t RNGCNTH;                     /*!< (@ 0x00000014) RNG Oscillator Count High                                  */
    
    struct {
      __IM  uint16_t RNGCNTH    : 12;           /*!< [11..0] Upper bits of oscillator count                                    */
    } RNGCNTH_b;
  } ;
} ADI_RNG_Type;                                 /*!< Size = 22 (0x16)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADI_LCD                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief LCD Controller (ADI_LCD)
  */

typedef struct {                                /*!< (@ 0x40008000) ADI_LCD Structure                                          */
  
  union {
    __IOM uint16_t LCDCON;                      /*!< (@ 0x00000000) LCD LCD Configuration Register                             */
    
    struct {
      __IOM uint16_t LCDEN      : 1;            /*!< [0..0] LCD Enable                                                         */
      __IOM uint16_t LCDMUX     : 1;            /*!< [1..1] LCD Multiplex Value                                                */
      __IM  uint16_t            : 1;
      __IOM uint16_t SCREENSEL  : 1;            /*!< [3..3] Screen Select                                                      */
      __IOM uint16_t FRAMESEL   : 1;            /*!< [4..4] LCD frame rate select                                              */
      __IM  uint16_t            : 3;
      __IOM uint16_t FRAMEINV   : 1;            /*!< [8..8] Frame inversion mode enable                                        */
      __IOM uint16_t LCDRST     : 1;            /*!< [9..9] LCD Data registers reset                                           */
      __IOM uint16_t FRAMEINT   : 1;            /*!< [10..10] Enable frame boundary interrupt                                  */
      __IOM uint16_t CPINT      : 1;            /*!< [11..11] Enable Charge Pump interrupt                                     */
      __IOM uint16_t BLINKEN    : 1;            /*!< [12..12] Blink Mode Enable                                                */
    } LCDCON_b;
  } ;
  __IM  uint16_t  RESERVED;
  
  union {
    __IOM uint16_t LCDSTAT;                     /*!< (@ 0x00000004) LCD LCD Status Register                                    */
    
    struct {
      __IOM uint16_t FRAMEINT   : 1;            /*!< [0..0] LCD Frame boundary interrupt                                       */
      __IOM uint16_t SAFE       : 1;            /*!< [1..1] Safe to write the registers                                        */
      __IOM uint16_t CP         : 1;            /*!< [2..2] Charge pump good                                                   */
      __IOM uint16_t VLCD       : 1;            /*!< [3..3] VLCD update complete                                               */
      __IOM uint16_t LCD        : 1;            /*!< [4..4] LCD IDLE state                                                     */
    } LCDSTAT_b;
  } ;
  __IM  uint16_t  RESERVED1;
  
  union {
    __IOM uint16_t LCDBLINK;                    /*!< (@ 0x00000008) LCD LCD Blink Control Register                             */
    
    struct {
      __IOM uint16_t BLKMOD     : 1;            /*!< [0..0] Blink mode clock source configuration bits                         */
      __IM  uint16_t            : 1;
      __IOM uint16_t BLKFREQ    : 1;            /*!< [2..2] Blink rate configuration bits                                      */
      __IM  uint16_t            : 2;
      __IOM uint16_t AUTOSWITCH : 1;            /*!< [5..5] Switch screen automatically                                        */
    } LCDBLINK_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t LCDCONTRAST;                 /*!< (@ 0x0000000C) LCD LCD Contrast Control Register                          */
    
    struct {
      __IOM uint16_t BIASLVL    : 4;            /*!< [3..0] Bias level selection                                               */
      __IM  uint16_t            : 1;
      __IOM uint16_t CP_EN      : 1;            /*!< [5..5] Charge pump enable                                                 */
      __IOM uint16_t CP_PD      : 1;            /*!< [6..6] Charge pump power down                                             */
    } LCDCONTRAST_b;
  } ;
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  LCDDATA0_S0;                  /*!< (@ 0x00000010) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  LCDDATA1_S0;                  /*!< (@ 0x00000014) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  LCDDATA2_S0;                  /*!< (@ 0x00000018) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  LCDDATA3_S0;                  /*!< (@ 0x0000001C) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  LCDDATA4_S0;                  /*!< (@ 0x00000020) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  LCDDATA5_S0;                  /*!< (@ 0x00000024) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED9;
  __IOM uint16_t  LCDDATA6_S0;                  /*!< (@ 0x00000028) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED10;
  __IOM uint16_t  LCDDATA7_S0;                  /*!< (@ 0x0000002C) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  LCDDATA0_S1;                  /*!< (@ 0x00000030) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  LCDDATA1_S1;                  /*!< (@ 0x00000034) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED13;
  __IOM uint16_t  LCDDATA2_S1;                  /*!< (@ 0x00000038) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED14;
  __IOM uint16_t  LCDDATA3_S1;                  /*!< (@ 0x0000003C) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED15;
  __IOM uint16_t  LCDDATA4_S1;                  /*!< (@ 0x00000040) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED16;
  __IOM uint16_t  LCDDATA5_S1;                  /*!< (@ 0x00000044) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED17;
  __IOM uint16_t  LCDDATA6_S1;                  /*!< (@ 0x00000048) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED18;
  __IOM uint16_t  LCDDATA7_S1;                  /*!< (@ 0x0000004C) LCD Screen 1 LCD Data Register n                           */
} ADI_LCD_Type;                                 /*!< Size = 78 (0x4e)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADI_DMA                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA (ADI_DMA)
  */

typedef struct {                                /*!< (@ 0x40010000) ADI_DMA Structure                                          */
  
  union {
    __IOM uint32_t DMASTA;                      /*!< (@ 0x00000000) DMA DMA Status                                             */
    
    struct {
      __IOM uint32_t MENABLE    : 1;            /*!< [0..0] Enable status of the controller                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t STATE      : 1;            /*!< [4..4] Current state of DMA controller                                    */
      __IM  uint32_t            : 11;
      __IOM uint32_t CHNLSM1    : 1;            /*!< [16..16] Number of available DMA channels minus 1                         */
    } DMASTA_b;
  } ;
  
  union {
    __IOM uint32_t DMACFG;                      /*!< (@ 0x00000004) DMA DMA Configuration                                      */
    
    struct {
      __IOM uint32_t MENABLE    : 1;            /*!< [0..0] Controller enable                                                  */
    } DMACFG_b;
  } ;
  __IOM uint32_t  DMAPDBPTR;                    /*!< (@ 0x00000008) DMA DMA channel primary control data base pointer          */
  __IOM uint32_t  DMAADBPTR;                    /*!< (@ 0x0000000C) DMA DMA channel alternate control data base pointer        */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint16_t DMASWREQ;                    /*!< (@ 0x00000014) DMA DMA channel software request                           */
    
    struct {
      __IOM uint16_t CHSWREQ    : 16;           /*!< [15..0] Generate software request                                         */
    } DMASWREQ_b;
  } ;
  __IM  uint16_t  RESERVED1[5];
  
  union {
    __IOM uint16_t DMARMSKSET;                  /*!< (@ 0x00000020) DMA DMA channel request mask set                           */
    
    struct {
      __IOM uint16_t CHREQMSET  : 16;           /*!< [15..0] Mask requests from DMA channels                                   */
    } DMARMSKSET_b;
  } ;
  __IM  uint16_t  RESERVED2;
  
  union {
    __IOM uint16_t DMARMSKCLR;                  /*!< (@ 0x00000024) DMA DMA channel request mask clear                         */
    
    struct {
      __IOM uint16_t CHREQMCLR  : 16;           /*!< [15..0] Clear REQ_MASK_SET bits in DMARMSKSET                             */
    } DMARMSKCLR_b;
  } ;
  __IM  uint16_t  RESERVED3;
  
  union {
    __IOM uint16_t DMAENSET;                    /*!< (@ 0x00000028) DMA DMA channel enable set                                 */
    
    struct {
      __IOM uint16_t CHENSET    : 16;           /*!< [15..0] Enable DMA channels                                               */
    } DMAENSET_b;
  } ;
  __IM  uint16_t  RESERVED4;
  
  union {
    __IOM uint16_t DMAENCLR;                    /*!< (@ 0x0000002C) DMA DMA channel enable clear                               */
    
    struct {
      __IOM uint16_t CHENCLR    : 16;           /*!< [15..0] Disable DMA channels                                              */
    } DMAENCLR_b;
  } ;
  __IM  uint16_t  RESERVED5;
  
  union {
    __IOM uint16_t DMAALTSET;                   /*!< (@ 0x00000030) DMA DMA channel primary-alternate set                      */
    
    struct {
      __IOM uint16_t CHPRIALTSET : 16;          /*!< [15..0] Control struct status / select alt struct                         */
    } DMAALTSET_b;
  } ;
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t DMAALTCLR;                   /*!< (@ 0x00000034) DMA DMA channel primary-alternate clear                    */
    
    struct {
      __IOM uint16_t CHPRIALTCLR : 16;          /*!< [15..0] Select primary data struct                                        */
    } DMAALTCLR_b;
  } ;
  __IM  uint16_t  RESERVED7;
  
  union {
    __IOM uint16_t DMAPRISET;                   /*!< (@ 0x00000038) DMA DMA channel priority set                               */
    
    struct {
      __IOM uint16_t CHPRISET   : 16;           /*!< [15..0] Configure channel for high priority                               */
    } DMAPRISET_b;
  } ;
  __IM  uint16_t  RESERVED8;
  
  union {
    __IOM uint16_t DMAPRICLR;                   /*!< (@ 0x0000003C) DMA DMA channel priority clear                             */
    
    struct {
      __IOM uint16_t CHPRICLR   : 16;           /*!< [15..0] Configure channel for default priority level                      */
    } DMAPRICLR_b;
  } ;
  __IM  uint16_t  RESERVED9[5];
  
  union {
    __IOM uint16_t DMAERRCHNLCLR;               /*!< (@ 0x00000048) DMA DMA Per Channel Error Clear                            */
    
    struct {
      __IOM uint16_t CHNL       : 16;           /*!< [15..0] Per channel Bus error status/ Per channel bus error
                                                     clear                                                                     */
    } DMAERRCHNLCLR_b;
  } ;
  __IM  uint16_t  RESERVED10;
  
  union {
    __IOM uint16_t DMAERRCLR;                   /*!< (@ 0x0000004C) DMA DMA bus error clear                                    */
    
    struct {
      __IOM uint16_t ERRCLR     : 16;           /*!< [15..0] Bus error status                                                  */
    } DMAERRCLR_b;
  } ;
  __IM  uint16_t  RESERVED11;
  
  union {
    __IOM uint16_t DMAINVALIDDESCCLR;           /*!< (@ 0x00000050) DMA DMA Per Channel Invalid Descriptor Clear               */
    
    struct {
      __IOM uint16_t CHNL       : 16;           /*!< [15..0] Per channel Invalid Descriptor status/ Per channel Invalid
                                                     descriptor status clear                                                   */
    } DMAINVALIDDESCCLR_b;
  } ;
  __IM  uint16_t  RESERVED12[983];
  
  union {
    __IOM uint16_t DMABSSET;                    /*!< (@ 0x00000800) DMA DMA channel bytes swap enable set                      */
    
    struct {
      __IOM uint16_t CHBSWAPSET : 16;           /*!< [15..0] Byte swap status                                                  */
    } DMABSSET_b;
  } ;
  __IM  uint16_t  RESERVED13;
  
  union {
    __IOM uint16_t DMABSCLR;                    /*!< (@ 0x00000804) DMA DMA channel bytes swap enable clear                    */
    
    struct {
      __IOM uint16_t CHBSWAPCLR : 16;           /*!< [15..0] Disable byte swap                                                 */
    } DMABSCLR_b;
  } ;
  __IM  uint16_t  RESERVED14[5];
  
  union {
    __IOM uint16_t DMASRCADSSET;                /*!< (@ 0x00000810) DMA DMA channel source address decrement enable
                                                                    set                                                        */
    
    struct {
      __IOM uint16_t CHSRCADRDECSET : 16;       /*!< [15..0] Source Address decrement status / configure Source address
                                                     decrement                                                                 */
    } DMASRCADSSET_b;
  } ;
  __IM  uint16_t  RESERVED15;
  
  union {
    __IOM uint16_t DMASRCADCLR;                 /*!< (@ 0x00000814) DMA DMA channel source address decrement enable
                                                                    clear                                                      */
    
    struct {
      __IOM uint16_t CHADRDECCLR : 16;          /*!< [15..0] Disable source address decrement                                  */
    } DMASRCADCLR_b;
  } ;
  __IM  uint16_t  RESERVED16;
  
  union {
    __IOM uint16_t DMADSTADSET;                 /*!< (@ 0x00000818) DMA DMA channel destination address decrement
                                                                    enable set                                                 */
    
    struct {
      __IOM uint16_t CHDSTADRDECSET : 16;       /*!< [15..0] Destination Address decrement status / configure destination
                                                     address decrement                                                         */
    } DMADSTADSET_b;
  } ;
  __IM  uint16_t  RESERVED17;
  
  union {
    __IOM uint16_t DMADSTADCLR;                 /*!< (@ 0x0000081C) DMA DMA channel destination address decrement
                                                                    enable clear                                               */
    
    struct {
      __IOM uint16_t CHADRDECCLR : 16;          /*!< [15..0] Disable destination address decrement                             */
    } DMADSTADCLR_b;
  } ;
  __IM  uint16_t  RESERVED18[993];
  __IOM uint8_t   DMAREVID;                     /*!< (@ 0x00000FE0) DMA DMA Controller Revision ID                             */
} ADI_DMA_Type;                                 /*!< Size = 4065 (0xfe1)                                                       */



/* =========================================================================================================================== */
/* ================                                         ADI_FEE0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Instruction Flash Controller (ADI_FEE0)
  */

typedef struct {                                /*!< (@ 0x40018000) ADI_FEE0 Structure                                         */
  __IOM uint16_t  FEESTA;                       /*!< (@ 0x00000000) FEE0 Status                                                */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  FEECON0;                      /*!< (@ 0x00000004) FEE0 Command Control                                       */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  FEECMD;                       /*!< (@ 0x00000008) FEE0 Command                                               */
  __IM  uint16_t  RESERVED2[3];
  __IOM uint16_t  FEEADR0L;                     /*!< (@ 0x00000010) FEE0 Lower page address                                    */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  FEEADR0H;                     /*!< (@ 0x00000014) FEE0 Upper page address                                    */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  FEEADR1L;                     /*!< (@ 0x00000018) FEE0 Lower page address                                    */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  FEEADR1H;                     /*!< (@ 0x0000001C) FEE0 Upper page address                                    */
  __IM  uint16_t  RESERVED6;
  
  union {
    __IOM uint16_t FEEKEY;                      /*!< (@ 0x00000020) FEE0 Key                                                   */
    
    struct {
      __IOM uint16_t KEY        : 16;           /*!< [15..0] Lock for FEE                                                      */
    } FEEKEY_b;
  } ;
  __IM  uint16_t  RESERVED7[7];
  __IOM uint16_t  FEESIGL;                      /*!< (@ 0x00000030) FEE0 Lower halfword of signature                           */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  FEESIGH;                      /*!< (@ 0x00000034) FEE0 Upper halfword of signature                           */
  __IM  uint16_t  RESERVED9[9];
  __IOM uint16_t  FEEADRAL;                     /*!< (@ 0x00000048) FEE0 Lower halfword of write abort address                 */
  __IM  uint16_t  RESERVED10;
  __IOM uint16_t  FEEADRAH;                     /*!< (@ 0x0000004C) FEE0 Upper halfword of write abort address                 */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  FEEPARCTL;                    /*!< (@ 0x00000050) FEE0 Parity Control Register                               */
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  FEEPARSTA;                    /*!< (@ 0x00000054) FEE0 Parity Status Register                                */
  __IM  uint16_t  RESERVED13;
  __IOM uint16_t  FEEPARADRL;                   /*!< (@ 0x00000058) FEE0 Parity Error Address Low                              */
  __IM  uint16_t  RESERVED14;
  __IOM uint16_t  FEEPARADRH;                   /*!< (@ 0x0000005C) FEE0 Parity Error Address High                             */
  __IM  uint16_t  RESERVED15[13];
  __IOM uint16_t  FEEAEN0;                      /*!< (@ 0x00000078) FEE0 System IRQ abort enable for interrupts 15
                                                                    to 0                                                       */
  __IM  uint16_t  RESERVED16;
  __IOM uint16_t  FEEAEN1;                      /*!< (@ 0x0000007C) FEE0 System IRQ abort enable for interrupts 31
                                                                    to 16                                                      */
  __IM  uint16_t  RESERVED17;
  __IOM uint16_t  FEEAEN2;                      /*!< (@ 0x00000080) FEE0 System IRQ abort enable for interrupts 47
                                                                    to 32                                                      */
  __IM  uint16_t  RESERVED18;
  __IOM uint16_t  FEEAEN3;                      /*!< (@ 0x00000084) FEE0 System IRQ abort enable for interrupts 60
                                                                    to 48                                                      */
} ADI_FEE0_Type;                                /*!< Size = 134 (0x86)                                                         */



/* =========================================================================================================================== */
/* ================                                          ADI_GPF                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief General Purpose Flash Controller (ADI_GPF)
  */

typedef struct {                                /*!< (@ 0x4001C000) ADI_GPF Structure                                          */
  __IOM uint16_t  GPFEESTA;                     /*!< (@ 0x00000000) GPF Status                                                 */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  GPFEECON0;                    /*!< (@ 0x00000004) GPF Command Control                                        */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  GPFEECMD;                     /*!< (@ 0x00000008) GPF Command                                                */
  __IM  uint16_t  RESERVED2[3];
  __IOM uint16_t  GPFEEADR0L;                   /*!< (@ 0x00000010) GPF Lower page address                                     */
  __IM  uint16_t  RESERVED3[3];
  __IOM uint16_t  GPFEEADR1L;                   /*!< (@ 0x00000018) GPF Lower page address                                     */
  __IM  uint16_t  RESERVED4[3];
  __IOM uint16_t  GPFEEKEY;                     /*!< (@ 0x00000020) GPF Key                                                    */
  __IM  uint16_t  RESERVED5[7];
  __IOM uint16_t  GPFEESIGL;                    /*!< (@ 0x00000030) GPF Lower halfword of signature                            */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  GPFEESIGH;                    /*!< (@ 0x00000034) GPF Upper halfword of signature                            */
  __IM  uint16_t  RESERVED7[9];
  __IOM uint16_t  GPFEEADRAL;                   /*!< (@ 0x00000048) GPF Lower halfword of write abort address                  */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  GPFEEADRAH;                   /*!< (@ 0x0000004C) GPF Upper halfword of write abort address                  */
  __IM  uint16_t  RESERVED9[21];
  __IOM uint16_t  GPFEEAEN0;                    /*!< (@ 0x00000078) GPF System IRQ abort enable for interrupts 15
                                                                    to 0                                                       */
  __IM  uint16_t  RESERVED10;
  __IOM uint16_t  GPFEEAEN1;                    /*!< (@ 0x0000007C) GPF System IRQ abort enable for interrupts 31
                                                                    to 16                                                      */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  GPFEEAEN2;                    /*!< (@ 0x00000080) GPF System IRQ abort enable for interrupts 47
                                                                    to 32                                                      */
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  GPFEEAEN3;                    /*!< (@ 0x00000084) GPF System IRQ abort enable for interrupts 60
                                                                    to 48                                                      */
} ADI_GPF_Type;                                 /*!< Size = 134 (0x86)                                                         */



/* =========================================================================================================================== */
/* ================                                         ADI_GPIO0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO (ADI_GPIO0)
  */

typedef struct {                                /*!< (@ 0x40020000) ADI_GPIO0 Structure                                        */
  __IOM uint16_t  GPCON;                        /*!< (@ 0x00000000) GPIO0 GPIO Port 0 Configuration                            */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  GPOEN;                        /*!< (@ 0x00000004) GPIO0 GPIO Port 0 output enable                            */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  GPPE;                         /*!< (@ 0x00000008) GPIO0 GPIO Port 0 output pullup/pulldown enable            */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  GPIEN;                        /*!< (@ 0x0000000C) GPIO0 GPIO Port 0 Input Path Enable                        */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  GPIN;                         /*!< (@ 0x00000010) GPIO0 GPIO Port 0 registered data input                    */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  GPOUT;                        /*!< (@ 0x00000014) GPIO0 GPIO Port 0 data output                              */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  GPSET;                        /*!< (@ 0x00000018) GPIO0 GPIO Port 0 data out set                             */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  GPCLR;                        /*!< (@ 0x0000001C) GPIO0 GPIO Port 0 data out clear                           */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  GPTGL;                        /*!< (@ 0x00000020) GPIO0 GPIO Port 0 pin toggle                               */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  GPPOL;                        /*!< (@ 0x00000024) GPIO0 GPIO Port 0 interrupt polarity                       */
  __IM  uint16_t  RESERVED9;
  __IOM uint16_t  GPIENA;                       /*!< (@ 0x00000028) GPIO0 GPIO Port 0 interrupt A enable                       */
  __IM  uint16_t  RESERVED10;
  __IOM uint16_t  GPIENB;                       /*!< (@ 0x0000002C) GPIO0 GPIO Port 0 interrupt B enable                       */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  GPINT;                        /*!< (@ 0x00000030) GPIO0 GPIO Port 0 interrupt Status                         */
} ADI_GPIO0_Type;                               /*!< Size = 50 (0x32)                                                          */



/* =========================================================================================================================== */
/* ================                                         ADI_SPIH                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief SPIH Master/Slave (ADI_SPIH)
  */

typedef struct {                                /*!< (@ 0x40024000) ADI_SPIH Structure                                         */
  __IOM uint16_t  SPIH0STA;                     /*!< (@ 0x00000000) SPIH Status                                                */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  SPIH0RX;                      /*!< (@ 0x00000004) SPIH Receive                                               */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  SPIH0TX;                      /*!< (@ 0x00000008) SPIH Transmit                                              */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  SPIH0DIV;                     /*!< (@ 0x0000000C) SPIH Baud rate selection                                   */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  SPIH0CON;                     /*!< (@ 0x00000010) SPIH SPI configuration                                     */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  SPIH0DMA;                     /*!< (@ 0x00000014) SPIH SPI DMA enable                                        */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  SPIH0CNT;                     /*!< (@ 0x00000018) SPIH Transfer byte count                                   */
} ADI_SPIH_Type;                                /*!< Size = 26 (0x1a)                                                          */



/* =========================================================================================================================== */
/* ================                                        ADI_SYSCLK                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief System Clocking (ADI_SYSCLK)
  */

typedef struct {                                /*!< (@ 0x40028000) ADI_SYSCLK Structure                                       */
  __IOM uint16_t  CLKCON0;                      /*!< (@ 0x00000000) Clock Control Register 0                                   */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  CLKCON1;                      /*!< (@ 0x00000004) Clock Control Register 0                                   */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  CLKCON2;                      /*!< (@ 0x00000008) Clock Control Register 2                                   */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  CLKCON3;                      /*!< (@ 0x0000000C) Clock Control Register 3                                   */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  CLKCON4;                      /*!< (@ 0x00000010) Clock Control Register 4                                   */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  CLKCON5;                      /*!< (@ 0x00000014) Clock Control Register 5                                   */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  CLKSTAT0;                     /*!< (@ 0x00000018) Clock Status Register 0                                    */
} ADI_SYSCLK_Type;                              /*!< Size = 26 (0x1a)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADI_CRC                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief CRC Engine (ADI_CRC)
  */

typedef struct {                                /*!< (@ 0x4002C000) ADI_CRC Structure                                          */
  __IOM uint16_t  CTL;                          /*!< (@ 0x00000000) CRC CRC Control Register                                   */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  IPDATA;                       /*!< (@ 0x00000004) CRC Input Data Register                                    */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  RESULT;                       /*!< (@ 0x00000008) CRC CRC Result Register                                    */
} ADI_CRC_Type;                                 /*!< Size = 10 (0xa)                                                           */



/* =========================================================================================================================== */
/* ================                                          ADI_PDI                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Parallel Display Interface (ADI_PDI)
  */

typedef struct {                                /*!< (@ 0x40030000) ADI_PDI Structure                                          */
  __IOM uint16_t  CFG;                          /*!< (@ 0x00000000) PDI PDI Configuration Register                             */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  INT_SET;                      /*!< (@ 0x00000004) PDI PDI Interrupt Set Register                             */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  INT_CLR;                      /*!< (@ 0x00000008) PDI PDI Interrupt Clear Register                           */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  STAT;                         /*!< (@ 0x0000000C) PDI PDI Status Register                                    */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  CMD;                          /*!< (@ 0x00000010) PDI PDI Command Register                                   */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  FRDATA_N;                     /*!< (@ 0x00000014) PDI PDI Frame Data Count Register                          */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  FIFO;                         /*!< (@ 0x00000018) PDI PDI Parameter FIFO                                     */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  IF_TIMING;                    /*!< (@ 0x0000001C) PDI PDI Interface Timing Register                          */
} ADI_PDI_Type;                                 /*!< Size = 30 (0x1e)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADI_AFE                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog Front End (ADI_AFE)
  */

typedef struct {                                /*!< (@ 0x40080000) ADI_AFE Structure                                          */
  
  union {
    __IOM uint32_t CFG;                         /*!< (@ 0x00000000) AFE AFE Configuration                                      */
    
    struct {
      __IM  uint32_t            : 19;
      __IOM uint32_t ALDOILIMIT_EN : 1;         /*!< [19..19] Enable LDO Current limit                                         */
    } CFG_b;
  } ;
  __IOM uint32_t  SEQ_CFG;                      /*!< (@ 0x00000004) AFE Sequencer Configuration                                */
  __IOM uint32_t  FIFO_CFG;                     /*!< (@ 0x00000008) AFE FIFOs Configuration                                    */
  __IOM uint32_t  SW_CFG;                       /*!< (@ 0x0000000C) AFE Switch Matrix Configuration                            */
  __IOM uint32_t  DAC_CFG;                      /*!< (@ 0x00000010) AFE DAC Configuration                                      */
  __IOM uint32_t  WG_CFG;                       /*!< (@ 0x00000014) AFE Waveform Generator Configuration                       */
  __IOM uint32_t  WG_DCLEVEL_1;                 /*!< (@ 0x00000018) AFE Waveform Generator - Trapezoid DC Level 1              */
  __IOM uint32_t  WG_DCLEVEL_2;                 /*!< (@ 0x0000001C) AFE Waveform Generator - Trapezoid DC Level 2              */
  __IOM uint32_t  WG_DELAY_1;                   /*!< (@ 0x00000020) AFE Waveform Generator - Trapezoid Delay 1 Time            */
  __IOM uint32_t  WG_SLOPE_1;                   /*!< (@ 0x00000024) AFE Waveform Generator - Trapezoid Slope 1 Time            */
  __IOM uint32_t  WG_DELAY_2;                   /*!< (@ 0x00000028) AFE Waveform Generator - Trapezoid Delay 2 Time            */
  __IOM uint32_t  WG_SLOPE_2;                   /*!< (@ 0x0000002C) AFE Waveform Generator - Trapezoid Slope 2 Time            */
  __IOM uint32_t  WG_FCW;                       /*!< (@ 0x00000030) AFE Waveform Generator - Sinusoid Frequency Control
                                                                    Word                                                       */
  __IOM uint32_t  WG_PHASE;                     /*!< (@ 0x00000034) AFE Waveform Generator - Sinusoid Phase Offset             */
  __IOM uint32_t  WG_OFFSET;                    /*!< (@ 0x00000038) AFE Waveform Generator - Sinusoid Offset                   */
  __IOM uint32_t  WG_AMPLITUDE;                 /*!< (@ 0x0000003C) AFE Waveform Generator - Sinusoid Amplitude                */
  __IOM uint32_t  ADC_CFG;                      /*!< (@ 0x00000040) AFE ADC Configuration                                      */
  __IOM uint32_t  SUPPLY_LPF_CFG;               /*!< (@ 0x00000044) AFE Supply Rejection Filter Configuration                  */
  __IOM uint32_t  SW_FULL_CFG_MSB;              /*!< (@ 0x00000048) AFE Switch Matrix Full Configuration (MSB)                 */
  __IOM uint32_t  SW_FULL_CFG_LSB;              /*!< (@ 0x0000004C) AFE Switch Matrix Full Configuration (LSB)                 */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  WG_DAC_CODE;                  /*!< (@ 0x00000054) AFE Waveform Generator - DAC Code                          */
  __IOM uint32_t  STATUS;                       /*!< (@ 0x00000058) AFE AFE Status                                             */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  SEQ_CRC;                      /*!< (@ 0x00000060) AFE Sequencer CRC Value                                    */
  __IOM uint32_t  SEQ_COUNT;                    /*!< (@ 0x00000064) AFE Sequencer Command Count                                */
  __IOM uint32_t  SEQ_TIMEOUT;                  /*!< (@ 0x00000068) AFE Sequencer Timeout Counter                              */
  __IOM uint32_t  DATA_FIFO_READ;               /*!< (@ 0x0000006C) AFE Data FIFO Read                                         */
  __IOM uint32_t  CMD_FIFO_WRITE;               /*!< (@ 0x00000070) AFE Command FIFO Write                                     */
  __IOM uint32_t  ADC_RESULT;                   /*!< (@ 0x00000074) AFE ADC Raw Result                                         */
  __IOM uint32_t  DFT_RESULT_REAL;              /*!< (@ 0x00000078) AFE DFT Result, Real Part                                  */
  __IOM uint32_t  DFT_RESULT_IMAG;              /*!< (@ 0x0000007C) AFE DFT Result, Imaginary Part                             */
  __IOM uint32_t  SUPPLY_LPF_RESULT;            /*!< (@ 0x00000080) AFE Supply Rejection Filter Result                         */
  __IOM uint32_t  TEMP_SENSOR_RESULT;           /*!< (@ 0x00000084) AFE Temperature Sensor Result                              */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  ANALOG_CAPTURE_IEN;           /*!< (@ 0x0000008C) AFE Analog Capture Interrupt Enable                        */
  __IOM uint32_t  ANALOG_GEN_IEN;               /*!< (@ 0x00000090) AFE Analog Generation Interrupt Enable                     */
  __IOM uint32_t  CMD_FIFO_IEN;                 /*!< (@ 0x00000094) AFE Command FIFO Interrupt Enable                          */
  __IOM uint32_t  DATA_FIFO_IEN;                /*!< (@ 0x00000098) AFE Data FIFO Interrupt Enable                             */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  ANALOG_CAPTURE_INT;           /*!< (@ 0x000000A0) AFE Analog Capture Interrupt                               */
  __IOM uint32_t  ANALOG_GEN_INT;               /*!< (@ 0x000000A4) AFE Analog Generation Interrupt                            */
  __IOM uint32_t  CMD_FIFO_INT;                 /*!< (@ 0x000000A8) AFE Command FIFO Interrupt                                 */
  __IOM uint32_t  DATA_FIFO_INT;                /*!< (@ 0x000000AC) AFE Data FIFO Interrupt                                    */
  __IOM uint32_t  SW_STATUS_MSB;                /*!< (@ 0x000000B0) AFE Switch Matrix Status MSB                               */
  __IOM uint32_t  SW_STATUS_LSB;                /*!< (@ 0x000000B4) AFE Switch Matrix Status (LSB)                             */
  __IOM uint32_t  ADCMIN;                       /*!< (@ 0x000000B8) AFE ADC Minimum Value Check                                */
  __IOM uint32_t  ADCMAX;                       /*!< (@ 0x000000BC) AFE ADC Maximum Value Check                                */
  __IOM uint32_t  ADCDELTA;                     /*!< (@ 0x000000C0) AFE ADC Delta Check                                        */
  __IM  uint32_t  RESERVED4[15];
  __IOM uint32_t  CAL_DATA_LOCK;                /*!< (@ 0x00000100) AFE Calibration Data Lock                                  */
  __IOM uint32_t  ADC_GAIN_TIA;                 /*!< (@ 0x00000104) AFE ADC Gain (TIA Measurement)                             */
  __IOM uint32_t  ADC_OFFSET_TIA;               /*!< (@ 0x00000108) AFE ADC Offset (TIA Measurement)                           */
  __IOM uint32_t  ADC_GAIN_TEMP_SENS;           /*!< (@ 0x0000010C) AFE ADC Gain (Temperature Sensor Measurement)              */
  __IOM uint32_t  ADC_OFFSET_TEMP_SENS;         /*!< (@ 0x00000110) AFE ADC Offset (Temperature Sensor Measurement)            */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  ADC_GAIN_AUX;                 /*!< (@ 0x00000118) AFE ADC Gain (Aux Channel Measurement)                     */
  __IOM uint32_t  ADC_OFFSET_AUX;               /*!< (@ 0x0000011C) AFE ADC Offset (Aux Channel Measurement)                   */
  __IOM uint32_t  DAC_OFFSET_UNITY;             /*!< (@ 0x00000120) AFE DAC Offset With Attenuator Disabled                    */
  __IOM uint32_t  DAC_OFFSET_ATTEN;             /*!< (@ 0x00000124) AFE DAC Offset With Attenuator Enabled                     */
  __IOM uint32_t  DAC_GAIN;                     /*!< (@ 0x00000128) AFE DAC Gain                                               */
  __IOM uint32_t  REF_TRIM0;                    /*!< (@ 0x0000012C) AFE Precision Reference Trim 0                             */
  __IOM uint32_t  REF_TRIM1;                    /*!< (@ 0x00000130) AFE Precision Reference Trim 1                             */
  __IOM uint32_t  ALDO_TRIM;                    /*!< (@ 0x00000134) AFE Analog LDO Trim                                        */
  __IOM uint32_t  DAC_TRIM;                     /*!< (@ 0x00000138) AFE DAC Trim                                               */
  __IOM uint32_t  INAMP_TRIM;                   /*!< (@ 0x0000013C) AFE INAMP Trim                                             */
  __IOM uint32_t  EXBUF_TRIM;                   /*!< (@ 0x00000140) AFE Excitation Buffer Trim                                 */
  __IOM uint32_t  TEMP_SENS_TRIM;               /*!< (@ 0x00000144) AFE Temperature Sensor Trim                                */
} ADI_AFE_Type;                                 /*!< Size = 328 (0x148)                                                        */



/* =========================================================================================================================== */
/* ================                                          ADI_CT                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Cap Touch Controller (ADI_CT)
  */

typedef struct {                                /*!< (@ 0x40084000) ADI_CT Structure                                           */
  __IOM uint32_t  CDC_PWR;                      /*!< (@ 0x00000000) Cap Touch                                                  */
  __IOM uint32_t  CFG1;                         /*!< (@ 0x00000004) Cap Touch Config Register 1                                */
  __IOM uint32_t  CFG2;                         /*!< (@ 0x00000008) Cap Touch Config Register 2                                */
  __IOM uint32_t  CFG3;                         /*!< (@ 0x0000000C) Cap Touch Config Register 3                                */
} ADI_CT_Type;                                  /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                          ADI_USB                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USB Controller (ADI_USB)
  */

typedef struct {                                /*!< (@ 0x400A0000) ADI_USB Structure                                          */
  __IOM uint8_t   FADDR;                        /*!< (@ 0x00000000) USB0 Function Address Register                             */
  __IOM uint8_t   POWER;                        /*!< (@ 0x00000001) USB0 Power and Device Control Register                     */
  __IOM uint8_t   INTRTX;                       /*!< (@ 0x00000002) USB0 Transmit Interrupt Register                           */
  __IM  uint8_t   RESERVED;
  __IOM uint16_t  INTRRX;                       /*!< (@ 0x00000004) USB0 Receive Interrupt Register                            */
  __IOM uint16_t  INTRTXE;                      /*!< (@ 0x00000006) USB0 Transmit Interrupt Enable Register                    */
  __IOM uint16_t  INTRRXE;                      /*!< (@ 0x00000008) USB0 Receive Interrupt Enable Register                     */
  __IOM uint8_t   IRQ;                          /*!< (@ 0x0000000A) USB0 Common Interrupts Register                            */
  __IOM uint8_t   IEN;                          /*!< (@ 0x0000000B) USB0 Common Interrupts Enable Register                     */
  __IOM uint16_t  FRAME;                        /*!< (@ 0x0000000C) USB0 Frame Number Register                                 */
  __IOM uint8_t   INDEX;                        /*!< (@ 0x0000000E) USB0 Index Register                                        */
  __IOM uint8_t   TESTMODE;                     /*!< (@ 0x0000000F) USB0 Testmode Register                                     */
  __IOM uint16_t  EPI_TXMAXP0;                  /*!< (@ 0x00000010) USB0 EPn Transmit Maximum Packet Length Register           */
  __IOM uint16_t  EPI_TXCSR_P0;                 /*!< (@ 0x00000012) USB0 EPn Transmit Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  EPI_RXMAXP0;                  /*!< (@ 0x00000014) USB0 EPn Receive Maximum Packet Length Register            */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  EP0I_CNT0;                    /*!< (@ 0x00000018) USB0 EP0 Number of Received Bytes Register                 */
  __IM  uint8_t   RESERVED2[5];
  __IOM uint8_t   EP0I_CFGDATA0;                /*!< (@ 0x0000001F) USB0 EP0 Configuration Information Register                */
  __IOM uint16_t  FIFO0;                        /*!< (@ 0x00000020) USB0 FIFO Word (32-Bit) Register                           */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  FIFO1;                        /*!< (@ 0x00000024) USB0 FIFO Word (32-Bit) Register                           */
  __IM  uint16_t  RESERVED4;
  __IOM uint32_t  FIFO2;                        /*!< (@ 0x00000028) USB0 FIFO Word (32-Bit) Register                           */
  __IOM uint16_t  FIFO3;                        /*!< (@ 0x0000002C) USB0 FIFO Word (32-Bit) Register                           */
  __IM  uint16_t  RESERVED5[25];
  __IOM uint8_t   DEV_CTL;                      /*!< (@ 0x00000060) USB0 Device Control Register                               */
  __IOM uint8_t   MISC;                         /*!< (@ 0x00000061) USB0 Miscellaneous Register                                */
  __IM  uint16_t  RESERVED6[11];
  __IOM uint8_t   EPINFO;                       /*!< (@ 0x00000078) USB0 Endpoint Information Register                         */
  __IOM uint8_t   RAMINFO;                      /*!< (@ 0x00000079) USB0 RAM Information Register                              */
  __IOM uint16_t  LINKINFO;                     /*!< (@ 0x0000007A) USB0 Link Information Register                             */
  __IM  uint8_t   RESERVED7;
  __IOM uint8_t   FS_EOF1;                      /*!< (@ 0x0000007D) USB0 Full-Speed EOF 1 Register                             */
  __IM  uint8_t   RESERVED8;
  __IOM uint8_t   SOFT_RST;                     /*!< (@ 0x0000007F) USB0 Software Reset Register                               */
  __IM  uint32_t  RESERVED9[32];
  __IOM uint16_t  EP0_TXMAXP;                   /*!< (@ 0x00000100) USB0 EPn Transmit Maximum Packet Length Register           */
  __IOM uint16_t  EP0_TXCSR_P;                  /*!< (@ 0x00000102) USB0 EPn Transmit Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  EP0_RXMAXP;                   /*!< (@ 0x00000104) USB0 EPn Receive Maximum Packet Length Register            */
  __IOM uint16_t  EP0_RXCSR_P;                  /*!< (@ 0x00000106) USB0 EPn Receive Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  EP0_CNT0;                     /*!< (@ 0x00000108) USB0 EP0 Number of Received Bytes Register                 */
  __IM  uint16_t  RESERVED10[3];
  __IOM uint16_t  EP1_TXMAXP;                   /*!< (@ 0x00000110) USB0 EPn Transmit Maximum Packet Length Register           */
  __IOM uint16_t  EP1_TXCSR_P;                  /*!< (@ 0x00000112) USB0 EPn Transmit Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  EP1_RXMAXP;                   /*!< (@ 0x00000114) USB0 EPn Receive Maximum Packet Length Register            */
  __IOM uint16_t  EP1_RXCSR_P;                  /*!< (@ 0x00000116) USB0 EPn Receive Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  EP1_RXCNT;                    /*!< (@ 0x00000118) USB0 EPn Number of Bytes Received Register                 */
  __IM  uint16_t  RESERVED11[3];
  __IOM uint16_t  EP2_TXMAXP;                   /*!< (@ 0x00000120) USB0 EPn Transmit Maximum Packet Length Register           */
  __IOM uint16_t  EP2_TXCSR_P;                  /*!< (@ 0x00000122) USB0 EPn Transmit Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  EP2_RXMAXP;                   /*!< (@ 0x00000124) USB0 EPn Receive Maximum Packet Length Register            */
  __IOM uint16_t  EP2_RXCSR_P;                  /*!< (@ 0x00000126) USB0 EPn Receive Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  EP2_RXCNT;                    /*!< (@ 0x00000128) USB0 EPn Number of Bytes Received Register                 */
  __IM  uint16_t  RESERVED12[3];
  __IOM uint16_t  EP3_TXMAXP;                   /*!< (@ 0x00000130) USB0 EPn Transmit Maximum Packet Length Register           */
  __IOM uint16_t  EP3_TXCSR_P;                  /*!< (@ 0x00000132) USB0 EPn Transmit Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  EP3_RXMAXP;                   /*!< (@ 0x00000134) USB0 EPn Receive Maximum Packet Length Register            */
  __IOM uint16_t  EP3_RXCSR_P;                  /*!< (@ 0x00000136) USB0 EPn Receive Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  EP3_RXCNT;                    /*!< (@ 0x00000138) USB0 EPn Number of Bytes Received Register                 */
  __IM  uint16_t  RESERVED13[99];
  __IOM uint16_t  DMA_IRQ;                      /*!< (@ 0x00000200) USB0 DMA Interrupt Register                                */
  __IM  uint16_t  RESERVED14;
  __IOM uint16_t  DMA0_CTL;                     /*!< (@ 0x00000204) USB0 DMA Channel n Control Register                        */
  __IM  uint16_t  RESERVED15;
  __IOM uint16_t  DMA0_ADDR;                    /*!< (@ 0x00000208) USB0 DMA Channel n Address Register                        */
  __IM  uint16_t  RESERVED16;
  __IOM uint16_t  DMA0_CNT;                     /*!< (@ 0x0000020C) USB0 DMA Channel n Count Register                          */
  __IM  uint16_t  RESERVED17[3];
  __IOM uint16_t  DMA1_CTL;                     /*!< (@ 0x00000214) USB0 DMA Channel n Control Register                        */
  __IM  uint16_t  RESERVED18;
  __IOM uint16_t  DMA1_ADDR;                    /*!< (@ 0x00000218) USB0 DMA Channel n Address Register                        */
  __IM  uint16_t  RESERVED19;
  __IOM uint16_t  DMA1_CNT;                     /*!< (@ 0x0000021C) USB0 DMA Channel n Count Register                          */
  __IM  uint16_t  RESERVED20[145];
  __IOM uint16_t  RXDPKTBUFDIS;                 /*!< (@ 0x00000340) USB0 RX Double Packet Buffer Disable for Endpoints
                                                                    1 to 3                                                     */
  __IOM uint16_t  TXDPKTBUFDIS;                 /*!< (@ 0x00000342) USB0 TX Double Packet Buffer Disable for Endpoints
                                                                    1 to 3                                                     */
  __IOM uint16_t  CT_UCH;                       /*!< (@ 0x00000344) USB0 Chirp Timeout Register                                */
  __IM  uint16_t  RESERVED21[13];
  __IOM uint16_t  LPM_ATTR;                     /*!< (@ 0x00000360) USB0 LPM Attribute Register                                */
  __IOM uint8_t   LPM_CTL;                      /*!< (@ 0x00000362) USB0 LPM Control Register                                  */
  __IOM uint8_t   LPM_IEN;                      /*!< (@ 0x00000363) USB0 LPM Interrupt Enable Register                         */
  __IOM uint8_t   LPM_IRQ;                      /*!< (@ 0x00000364) USB0 LPM Interrupt Status Register                         */
  __IM  uint8_t   RESERVED22[55];
  __IOM uint16_t  PHY_CTL;                      /*!< (@ 0x0000039C) USB0 FS PHY Control                                        */
  __IOM uint16_t  PHY_STAT;                     /*!< (@ 0x0000039E) USB0 FS PHY Status                                         */
  __IM  uint32_t  RESERVED23[4];
  __IOM uint32_t  RAM_ADDR;                     /*!< (@ 0x000003B0) USB0 RAM Address Register                                  */
  __IOM uint32_t  RAM_DATA;                     /*!< (@ 0x000003B4) USB0 RAM Data Register                                     */
} ADI_USB_Type;                                 /*!< Size = 952 (0x3b8)                                                        */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define ADI_GPT0_BASE               0x40000000UL
#define ADI_GPT1_BASE               0x40000400UL
#define ADI_GPT2_BASE               0x40000800UL
#define ADI_ID_BASE                 0x40002020UL
#define ADI_PWR_BASE                0x40002400UL
#define ADI_EI_BASE                 0x40002420UL
#define ADI_PWRVCC_BASE             0x40002480UL
#define ADI_WUT_BASE                0x40002500UL
#define ADI_WDT_BASE                0x40002580UL
#define ADI_RTC_BASE                0x40002600UL
#define ADI_I2C_BASE                0x40003000UL
#define ADI_SPI0_BASE               0x40004000UL
#define ADI_SPI1_BASE               0x40004400UL
#define ADI_UART_BASE               0x40005000UL
#define ADI_I2S_BASE                0x40005800UL
#define ADI_BEEP_BASE               0x40005C00UL
#define ADI_RNG_BASE                0x40006000UL
#define ADI_LCD_BASE                0x40008000UL
#define ADI_DMA_BASE                0x40010000UL
#define ADI_FEE0_BASE               0x40018000UL
#define ADI_GPF_BASE                0x4001C000UL
#define ADI_GPIO0_BASE              0x40020000UL
#define ADI_GPIO1_BASE              0x40020040UL
#define ADI_GPIO2_BASE              0x40020080UL
#define ADI_GPIO3_BASE              0x400200C0UL
#define ADI_GPIO4_BASE              0x40020100UL
#define ADI_SPIH_BASE               0x40024000UL
#define ADI_SYSCLK_BASE             0x40028000UL
#define ADI_CRC_BASE                0x4002C000UL
#define ADI_PDI_BASE                0x40030000UL
#define ADI_AFE_BASE                0x40080000UL
#define ADI_CT_BASE                 0x40084000UL
#define ADI_USB_BASE                0x400A0000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define ADI_GPT0                    ((ADI_GPT0_Type*)          ADI_GPT0_BASE)
#define ADI_GPT1                    ((ADI_GPT1_Type*)          ADI_GPT1_BASE)
#define ADI_GPT2                    ((ADI_GPT2_Type*)          ADI_GPT2_BASE)
#define ADI_ID                      ((ADI_ID_Type*)            ADI_ID_BASE)
#define ADI_PWR                     ((ADI_PWR_Type*)           ADI_PWR_BASE)
#define ADI_EI                      ((ADI_EI_Type*)            ADI_EI_BASE)
#define ADI_PWRVCC                  ((ADI_PWRVCC_Type*)        ADI_PWRVCC_BASE)
#define ADI_WUT                     ((ADI_WUT_Type*)           ADI_WUT_BASE)
#define ADI_WDT                     ((ADI_WDT_Type*)           ADI_WDT_BASE)
#define ADI_RTC                     ((ADI_RTC_Type*)           ADI_RTC_BASE)
#define ADI_I2C                     ((ADI_I2C_Type*)           ADI_I2C_BASE)
#define ADI_SPI0                    ((ADI_SPI0_Type*)          ADI_SPI0_BASE)
#define ADI_SPI1                    ((ADI_SPI1_Type*)          ADI_SPI1_BASE)
#define ADI_UART                    ((ADI_UART_Type*)          ADI_UART_BASE)
#define ADI_I2S                     ((ADI_I2S_Type*)           ADI_I2S_BASE)
#define ADI_BEEP                    ((ADI_BEEP_Type*)          ADI_BEEP_BASE)
#define ADI_RNG                     ((ADI_RNG_Type*)           ADI_RNG_BASE)
#define ADI_LCD                     ((ADI_LCD_Type*)           ADI_LCD_BASE)
#define ADI_DMA                     ((ADI_DMA_Type*)           ADI_DMA_BASE)
#define ADI_FEE0                    ((ADI_FEE0_Type*)          ADI_FEE0_BASE)
#define ADI_GPF                     ((ADI_GPF_Type*)           ADI_GPF_BASE)
#define ADI_GPIO0                   ((ADI_GPIO0_Type*)         ADI_GPIO0_BASE)
#define ADI_GPIO1                   ((ADI_GPIO0_Type*)         ADI_GPIO1_BASE)
#define ADI_GPIO2                   ((ADI_GPIO0_Type*)         ADI_GPIO2_BASE)
#define ADI_GPIO3                   ((ADI_GPIO0_Type*)         ADI_GPIO3_BASE)
#define ADI_GPIO4                   ((ADI_GPIO0_Type*)         ADI_GPIO4_BASE)
#define ADI_SPIH                    ((ADI_SPIH_Type*)          ADI_SPIH_BASE)
#define ADI_SYSCLK                  ((ADI_SYSCLK_Type*)        ADI_SYSCLK_BASE)
#define ADI_CRC                     ((ADI_CRC_Type*)           ADI_CRC_BASE)
#define ADI_PDI                     ((ADI_PDI_Type*)           ADI_PDI_BASE)
#define ADI_AFE                     ((ADI_AFE_Type*)           ADI_AFE_BASE)
#define ADI_CT                      ((ADI_CT_Type*)            ADI_CT_BASE)
#define ADI_USB                     ((ADI_USB_Type*)           ADI_USB_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif

#endif /* ADUCM350_H */


/** @} */ /* End of group ADuCM350 */

/** @} */ /* End of group Analog Devices */
